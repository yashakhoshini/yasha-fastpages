{
  
    
        "post0": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) # organizing coins # Symbol, Name, and price . BTC Bitcoin 19203.20912786924 ETH Ethereum 1302.535600928555 USDT Tether USD 1.000094285368392 USDC USDC 1.000477661148097 BNB Binance Coin 270.00105525107205 XRP XRP 0.4897314042127202 BUSD Binance USD 1.0003009213568992 ADA Cardano 0.3660624589069799 SOL Solana 30.254407183042204 DOGE Dogecoin 0.058748961413204105 DOT Polkadot 6.069472359767447 MATIC Polygon 0.7868259700408456 DAI Dai 1.00045950757267 SHIB Shiba Inu 0.000010120129500166 TRX TRON 0.06362493936708112 STETH Lido Staked Ether 1293.6357849687838 WETH Wrapped Ether 1301.545746759449 UNI Uniswap 6.269707849441305 WBTC Wrapped BTC 19196.44969734286 AVAX Avalanche 15.754553577525822 OKB OKB 16.869579869774455 CAKE PancakeSwap 4.40893962367892 ATOM Cosmos 11.68714343028012 LTC Litecoin 51.39089480432234 FTT FTX Token 23.497306556423972 ETC Ethereum Classic 23.42441136851592 XMR Monero 141.11608602181957 XLM Stellar 0.11285616690108048 ALGO Algorand 0.3167857570029688 BTCB Bitcoin BEP2 19212.187914427504 CRO Cronos 0.10323077808698662 BCH Bitcoin Cash 107.85469374357216 ENS EnergySwap 19.353983535613075 NEAR NEAR Protocol 2.998530943311797 LUNC Terra Classic 0.000274653305505199 WEMIX WEMIX TOKEN 1.7872039849010353 QNT Quant 167.15447160866495 HT Huobi Token 7.82935155981905 FLOW Flow 1.4794075714098018 VET VeChain 0.022835859415336612 FIL Filecoin 5.0477849904337075 HBAR Hedera 0.061313944522773646 MANA Decentraland 0.6256132037754569 FRAX Frax 0.9995757664627505 ICP Internet Computer (DFINITY) 4.935016045950497 EGLD Elrond 53.78654374759491 IMX Immutable X 0.6308515794637338 XTZ Tezos 1.3670560843838389 SAND The Sandbox 0.7549307110020637 CHZ Chiliz 0.18089587388302542 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . Request Digital Coin . RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ . Begin Rapid API Code . import requests . url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } . response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) . End Rapid API Code . json = response.json() # convert response to python json object . Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form . - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions . - To read the result, Data Scientist of Developer converts JSON into human readable form . - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) . organizing coins . Symbol, Name, and price . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson Notes - 3.1 - 3.2",
            "content": "3.1.1 . Questions: . What exactly IS a variable? . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time . | What is the best data type to represent someone&#39;s dog&#39;s name? . String . | Why is it important to give variables specific names before containing values? . So you don&#39;t get them mixed up . | What is the best way to represent someone&#39;s phone number? . String . Bonus (Not required but important to know): . | How can we update a variable&#39;s value . (blank) = updated version . | What function is used to recieve a user&#39;s input? . Input . | | . Notes: . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. Assign variable that coorelates to the function so less errors are made 3 different data types that support different data * integer (numbers) * string (or text/letters) * Boolean (True/False statements) . Hacks: Assignment Operater: The operator used to assign a new value to a variable, property, event or indexer element. Example: X = 5 Collegeboard uses arrow symbols to assign a value to a variable. A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? The variable would display 22. . x = 22 x = 15 display(x) . 15 . 3.1.2 . Questions: . What is a list? . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . | What is an element . A fragment of computer code (can be any piece of computer readable text) . | What is an easy way to reference the elements in a list or string? . | . WorldCup = [&quot;argentina&quot;, &quot;portugal&quot;, &quot;france&quot;, &quot;spain&quot;] print(WorldCup) . [&#39;argentina&#39;, &#39;portugal&#39;, &#39;france&#39;, &#39;spain&#39;] . What is an example of a string? | . print(&quot;Hello Universe&quot;) . Hello Universe . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . Create an index of your favorite foods . Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [&quot;food1&quot;] . 3.2.1 . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range(len(numlist)): numlist[i -1] += int(add) print(numlist) . [30, 32, 34] . 3.2.2 . Hacks . On a single markdown file: . Insert a screenshot of your score on the python quiz . &lt;img src=”(https://lh3.googleusercontent.com/pw/AL9nZEVaUAytqUPYHYe7jvSB_sRpgsH33V8gMQALaw5hQB9L5m3X_PAbOgRbDXha6WPm0SwLXa0__dElRu27D_K8vG622B4BZ0rPLq38V2hEt8owgwJUYsdf9KfBi59UBG3FmSi8xu1tP4pyHnglpaZWynfx4nVx1Ma7DR49S2R-aMk8JCyQqyTj1OfYC9qSTQWYODhw2pAMo1FKUl5HywmHzMMIxdKNWSOSV50nhXxzOfoHPgJvw1iCDuDcAhUYaUa0dgTr4J1FbZpihaI3ouCcYlcD1gwezWMw4MnsFW7PFL0I_Be5LSWMhptwsL1tLVrp1kBhPyAW7AtWlXvBCH6niq007pYWo1w7my7A0Yb6MecUAWjxxn5jtXlM1hLtThiaZZ2aHBPYXxQCn4Slftr75U_1QeKOqQA_XLSv49CFOajojxJ8cltWfw7HA-kuG7LN-m9zX4bNpAyGwW8pAEuF5xs_Lcv7CN7Fmk6xqcn1YBu027dBm4OmHIg4QXj-KWjccLYpyTpdQs7bE8gaEX_2Wv-GFhHP71qWjhd_NgZGC68EiaHEvHNgQcQ391bQ_K5IRowgpW8rqgH6k69oYbDuXFqVxrwyHW3qJUvmqZ2QRoEe6ZiXH_qKWyZgvU0QEbeZr_D1HXwqomWBqqyJ-bnuPJxCcLPEpDLptT2bhcMhwyndWmmwjdcNJ3fHdw9DQRYtG9yLc69TmpoI9MlfpKP1wRsG1WlprdIDhuL7tAlmd4BFiKCzbYgdQBQzyYVac9znbqZPM_xxcETMc7V-G4wsdE0LTapF1F-GwPrabv_WcwKvEqwQiusbiUYpNLWQJS-5Wjw3tn9P1oipjSnWwD2bN1c_ZV-9qzfCy6hp4QBkZc-SwXAYz8wXBZ4paQp1z72UMXMTzgivXe-uZlmuNK4WNMiR4w=w1662-h1356-no?authuser=0)”&gt; . | Insert a screenshot of your simplifying of the food list . | . | . Food = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwich&quot;] display(Food) . [&#39;pizza&#39;, &#39;hot dog&#39;, &#39;sushi&#39;, &#39;strawberry&#39;, &#39;sandwich&#39;] . Why are using lists better for a program, rather than writing out each line of code? . It&#39;s more efficent because rather than imputing data one by one you can do it way faster using lists. . | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list . | . country1 = &quot;Iran&quot; country2 = &quot;Switzerland&quot; country3 = &quot;Japan&quot; country4 = &quot;Ghana&quot; # Inputing values one by one print(country1, country2, country3, country4) . Iran Switzerland Japan Ghana . countries = [&quot;Iran&quot;, &quot;Switzerland&quot;, &quot;Japan&quot;, &quot;Ghana&quot;, ] # Using a list to put values into the countries variable. display(countries) . [&#39;Iran&#39;, &#39;Switzerland&#39;, &#39;Japan&#39;, &#39;Ghana&#39;] .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/2022/11/28/3.1-3.1-group-lesson.html",
            "relUrl": "/collegeboard/2022/11/28/3.1-3.1-group-lesson.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Javascript Kernel Test",
            "content": "print(&quot;Hello World Javascript Edition&quot;) print(&quot;If you see this, my Javascript kernel is working&quot;) .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/javascript/2022/11/18/javascript-test.html",
            "relUrl": "/javascript/2022/11/18/javascript-test.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bash Kernel Test",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/bash/2022/11/18/bash-test.html",
            "relUrl": "/bash/2022/11/18/bash-test.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Final Test Corrections",
            "content": "Test Correction Question #27 . Correction: The variables string and Boolean are appropiate for this situation however the names s and a have no meaning and will prove to make the code segment harder to read. . Test Correction Question #28 . Correction: Customers who use more than 25 unites of electricity are incorrectly charged by the code. These customers are charged only for the number of units above 25. For example, say a customer were to use 32 units of electricity, they should be charged a total of $174, $5 for the first 25 and $7 for the additional 7 units. This code segment would incorrectly charge the customer $49 for the 32 units. . Test Correction Question #35 . Correction: This code segment assigns maxPS the value 50 when time &gt; 120 and assigns maxPS the value 30 otherwise. . Test Correction Question #36 . Correction: My answer would have been correct solution if i were initialized to 0 instead of 1. This code segment will generate the list [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]. . Test Correction Question #37 . Correction: This code segment assigns both variables the original value of num1. . Test Correction Question #40 . Correction: My error was not knowing that something will be displayed no matter what the values of x and y are. . Test Correction Question #42 . Correction: The code segment assigns the value 4 to num3 and assigns the value 8 to num1 after initially assigning values to the variables. The value of sum at the end of the code segment is 8 + 4 + 4, or 16. . Test Correction Question #43 . Correction: I was inccorect because 6 is the value of x after the code segment is executed, not the value of result. . Test Correction Question #49 . Correction: I was incorrect because this code segment produces the string &quot;onno&quot;. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/2022/11/09/trimester-1-final-test-corrections.html",
            "relUrl": "/collegeboard/2022/11/09/trimester-1-final-test-corrections.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Night Of The Museum",
            "content": "My Experiences . Overall my time spent during night at the museum was productive because I got to see what other groups presented for their finals. A lot of them were creative and unique which gave me a different perspective on our own project. I also asked people, specifically DevOps people, questions about what they did differently to help their project. I also socialzed with some of my friends from the other computer science teacher&#39;s class. Overall it was a great experience and I was suprised to see so many parents and guests in the room walking around looking at our work also. . . As for my own group, I felt I fulfilled my role to the best of my ability. I got everything done that the DevOps needed to do. Next trimester would be better if I was more interactive on our project and constantly committing important changes. The hardest concept for me to learn was deployment but with the help of visuals I understood and learned more about it. . I am excited for next trimester in Mr. Mortenson&#39;s class as I hope to learn as much as possible and use that knowledge to help me in the future. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/notm/2022/11/09/night-of-the-museum.html",
            "relUrl": "/notm/2022/11/09/night-of-the-museum.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Plan for Next Trimester",
            "content": "Next trimester I have big goals for myself, as of now, I dropship, run a clothing brand and trade stocks. These three side hustles have helped me and my friend make over 10 thousand dollars in profit! However this class has gave me the idea for something that could help me make a lot of money. . Recently, I grew quite fond of indicators and was looking at the code behind some of them. Hopefully within the next few months I will be able to code my own indicator for tradingview and provide paid access for people that want to use it. I will most likely code it using PineScript which is built in on tradingview. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/notm/2022/11/09/next-trimester-plan.html",
            "relUrl": "/notm/2022/11/09/next-trimester-plan.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Script for final presentation",
            "content": "My role as the DevOps is to reveal my website to the internet, this process is known as deployment. I work in AWS, a platform used to host the backend. Whenever my group makes changes to our project my job is to make sure it&#39;s up to date. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/devops/2022/11/02/devops-script.html",
            "relUrl": "/python/devops/2022/11/02/devops-script.html",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Problems and Solutions",
            "content": "Problem 1: Over these past few weeks I spent most of my time doing DevOps work, I didn’t really understand much at first and as time went on I only learned a tiny bit. . Solution 1: However yesterday, One of my friends helped me understand commands and specific concepts better. After that, I was able to finally deploy my website, I technically had it deployed before but it was just the wrong repository. . As of now, we are working on our API for the project. Specifically we are generating a new API and adding it into vscode. Our idea was to make an API that asks people for their reviews on our products (shirts, shorts, crewnecks, etc).op .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/10/28/problems-solutions.html",
            "relUrl": "/markdown/2022/10/28/problems-solutions.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Visuals for DevOps role video",
            "content": ". . . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/devops/2022/10/24/dev-ops-visuals.html",
            "relUrl": "/python/devops/2022/10/24/dev-ops-visuals.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Dev Ops Video Script",
            "content": "My name is yasha and I am the Dev Ops manager on my team. At first I had a lot of trouble learning and understanding the role as I made many mistakes. The hardest task for me to complete was deployment, I had trouble adding my repository to the correct directory. I also had trouble understanding the concepts of Nginx and how sites-available and sites-enabled were linked. However after asking around for help and reading tutorials I was better able to understand how nginx files work off of each other. Both files are linked to each other meaning whenever a change is made to sites-enabled, it will update to sites-available. This is efficent because it doesn’t require you to update both files. . Once I understood these conecpts I learned about deployment as a whole. The running application runs the code in the project directory and is held in the docker container. What helped me understand deployment better was thinking of it as a box. Docker is the box that contains your running application and Nginx is the window on the box that reveals it to the internet. . Another aspect of Dev Ops is understanding your tools. Github is a file-hosting cloud that allows teams to work on the same project. Docker lets you run the application, your application is your website. An IDE otherwise known as an interactive developer environment is a code editor, in our case, vscode. . To summarize, I think that Dev Ops is one of the hardest roles to master and at first I didn’t think I was the correct person for it however as time went on I realized that Dev Ops is an opportunity for me to acquire learning skills from different concepts. I still would like to learn more about Nginx and IDE’s. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/dev%20ops/2022/10/21/dev-ops-script.html",
            "relUrl": "/markdown/dev%20ops/2022/10/21/dev-ops-script.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Jokes Api",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2022/10/19/jokes-API.html",
            "relUrl": "/2022/10/19/jokes-API.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "22 Error Testing",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2022/10/14/22-error-testing.html",
            "relUrl": "/2022/10/14/22-error-testing.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) # organizing coins # Symbol, Name, and price . BTC Bitcoin 19203.20912786924 ETH Ethereum 1302.535600928555 USDT Tether USD 1.000094285368392 USDC USDC 1.000477661148097 BNB Binance Coin 270.00105525107205 XRP XRP 0.4897314042127202 BUSD Binance USD 1.0003009213568992 ADA Cardano 0.3660624589069799 SOL Solana 30.254407183042204 DOGE Dogecoin 0.058748961413204105 DOT Polkadot 6.069472359767447 MATIC Polygon 0.7868259700408456 DAI Dai 1.00045950757267 SHIB Shiba Inu 0.000010120129500166 TRX TRON 0.06362493936708112 STETH Lido Staked Ether 1293.6357849687838 WETH Wrapped Ether 1301.545746759449 UNI Uniswap 6.269707849441305 WBTC Wrapped BTC 19196.44969734286 AVAX Avalanche 15.754553577525822 OKB OKB 16.869579869774455 CAKE PancakeSwap 4.40893962367892 ATOM Cosmos 11.68714343028012 LTC Litecoin 51.39089480432234 FTT FTX Token 23.497306556423972 ETC Ethereum Classic 23.42441136851592 XMR Monero 141.11608602181957 XLM Stellar 0.11285616690108048 ALGO Algorand 0.3167857570029688 BTCB Bitcoin BEP2 19212.187914427504 CRO Cronos 0.10323077808698662 BCH Bitcoin Cash 107.85469374357216 ENS EnergySwap 19.353983535613075 NEAR NEAR Protocol 2.998530943311797 LUNC Terra Classic 0.000274653305505199 WEMIX WEMIX TOKEN 1.7872039849010353 QNT Quant 167.15447160866495 HT Huobi Token 7.82935155981905 FLOW Flow 1.4794075714098018 VET VeChain 0.022835859415336612 FIL Filecoin 5.0477849904337075 HBAR Hedera 0.061313944522773646 MANA Decentraland 0.6256132037754569 FRAX Frax 0.9995757664627505 ICP Internet Computer (DFINITY) 4.935016045950497 EGLD Elrond 53.78654374759491 IMX Immutable X 0.6308515794637338 XTZ Tezos 1.3670560843838389 SAND The Sandbox 0.7549307110020637 CHZ Chiliz 0.18089587388302542 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . Request Digital Coin . RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ . Begin Rapid API Code . import requests . url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } . response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) . End Rapid API Code . json = response.json() # convert response to python json object . Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form . - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions . - To read the result, Data Scientist of Developer converts JSON into human readable form . - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) . organizing coins . Symbol, Name, and price . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "AP Test Corrections",
            "content": "Improvements &amp; Study Material . Understanding the concept of Parameters is difficult for me so I could study them better. Code that multiplies is also a concept that I would like to study and learn more. I was confused on the topic of Nested Loops. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/2022/10/10/AP-test-questions.html",
            "relUrl": "/python/2022/10/10/AP-test-questions.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1496,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29448,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983286029357&#34;,&#34;total24hVolume&#34;:&#34;62130747822&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384191184818&#34;,&#34;price&#34;:&#34;20039.854500546586&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.00&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20051.438940241358&#34;,&#34;20112.942136659854&#34;,&#34;20157.819968805998&#34;,&#34;20254.029991435713&#34;,&#34;20303.466331336567&#34;,&#34;20352.46379557382&#34;,&#34;20340.736960702463&#34;,&#34;20383.68761580728&#34;,&#34;20327.56610010769&#34;,&#34;20249.0598171069&#34;,&#34;20216.33733971908&#34;,&#34;20180.506474095324&#34;,&#34;20159.110575592727&#34;,&#34;20134.92190087771&#34;,&#34;20157.64358637768&#34;,&#34;20231.83287602472&#34;,&#34;20177.524728080465&#34;,&#34;20081.062490908993&#34;,&#34;20034.134493627964&#34;,&#34;20056.387678604326&#34;,&#34;20062.33767502718&#34;,&#34;20102.601333616225&#34;,&#34;20062.92043596876&#34;,&#34;20037.88842379937&#34;,&#34;20042.0240783645&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;38155001311&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166753001525&#34;,&#34;price&#34;:&#34;1363.2862386654604&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.08&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.1166752669458&#34;,&#34;1351.4752396724552&#34;,&#34;1352.7565855474788&#34;,&#34;1364.7069535474543&#34;,&#34;1375.2332279379189&#34;,&#34;1375.0120085043593&#34;,&#34;1372.8560956800545&#34;,&#34;1376.1109732749908&#34;,&#34;1374.2091487475132&#34;,&#34;1367.8770624662602&#34;,&#34;1366.413446523702&#34;,&#34;1362.3283465053476&#34;,&#34;1360.2889128350394&#34;,&#34;1358.4058794835446&#34;,&#34;1360.971024625842&#34;,&#34;1370.08061964796&#34;,&#34;1367.8080450053967&#34;,&#34;1363.1362582897543&#34;,&#34;1364.1095458044765&#34;,&#34;1363.798675385996&#34;,&#34;1363.631276432834&#34;,&#34;1363.8383885694095&#34;,&#34;1360.9458284500292&#34;,&#34;1359.2096422918778&#34;,&#34;1360.9920678507171&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;12211408705&#34;,&#34;btcPrice&#34;:&#34;0.06802874934188154&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68240554141&#34;,&#34;price&#34;:&#34;1.0004101838338622&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0004730164696796&#34;,&#34;0.9996925245670222&#34;,&#34;1.0003305556540378&#34;,&#34;0.9991437132975184&#34;,&#34;0.9997206896584828&#34;,&#34;1.0003229307902617&#34;,&#34;1.0002174675069595&#34;,&#34;0.999925766541416&#34;,&#34;1.000708618241012&#34;,&#34;1.0010737689896891&#34;,&#34;1.0002632048681543&#34;,&#34;1.0009610459933431&#34;,&#34;1.0002976934190984&#34;,&#34;1.000454394711972&#34;,&#34;0.9999051558590528&#34;,&#34;0.9994295746356769&#34;,&#34;1.0013423068981988&#34;,&#34;1.0018353783090301&#34;,&#34;0.9994152501955391&#34;,&#34;1.0004625909040463&#34;,&#34;0.9999277510688191&#34;,&#34;1.0000250969576618&#34;,&#34;1.0007856949488618&#34;,&#34;1.0002734024299755&#34;,&#34;1.0000861385454851&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40226874368&#34;,&#34;btcPrice&#34;:&#34;0.000049921030305214&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46271445701&#34;,&#34;price&#34;:&#34;1.0002852025758195&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0003790781178878&#34;,&#34;0.9997290863175305&#34;,&#34;1.0003038765412497&#34;,&#34;0.9991408722230394&#34;,&#34;0.9997209463954263&#34;,&#34;1.0001156279108188&#34;,&#34;1.0002132589197983&#34;,&#34;0.999979672700525&#34;,&#34;1.0007058659518255&#34;,&#34;1.0009680461396826&#34;,&#34;1.0002125205262982&#34;,&#34;1.0008177555056958&#34;,&#34;1.000215586806383&#34;,&#34;1.0005180826321018&#34;,&#34;0.9999336999249582&#34;,&#34;0.9994290728265802&#34;,&#34;1.001276747170873&#34;,&#34;1.0017305255841273&#34;,&#34;0.9995250487882986&#34;,&#34;1.0004327041522338&#34;,&#34;1.0000346997048333&#34;,&#34;0.9999849859295973&#34;,&#34;1.0007009863702179&#34;,&#34;1.0002434560917697&#34;,&#34;1.0000777737676467&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3415108297&#34;,&#34;btcPrice&#34;:&#34;0.00004991479367021&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41742606393&#34;,&#34;price&#34;:&#34;288.12689299638276&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.73&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0339632140167&#34;,&#34;293.22632610181876&#34;,&#34;293.9558805163323&#34;,&#34;295.03284994285843&#34;,&#34;297.1816835216467&#34;,&#34;296.57165154567053&#34;,&#34;296.508723433339&#34;,&#34;296.27500319415884&#34;,&#34;295.95929231412583&#34;,&#34;295.2368476142224&#34;,&#34;294.87128482644766&#34;,&#34;294.9890632073065&#34;,&#34;294.53535412890847&#34;,&#34;294.27414059114204&#34;,&#34;294.2693258362167&#34;,&#34;294.8737143821679&#34;,&#34;294.2088468832473&#34;,&#34;293.9289085279649&#34;,&#34;293.69304197097887&#34;,&#34;293.9618989492412&#34;,&#34;293.7066994813715&#34;,&#34;293.40677313758624&#34;,&#34;293.2186341808331&#34;,&#34;293.09767105211586&#34;,&#34;289.6911749595674&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;871740812&#34;,&#34;btcPrice&#34;:&#34;0.014377693859430173&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24942084236&#34;,&#34;price&#34;:&#34;0.5002566536278147&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.13&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4936121327589804&#34;,&#34;0.49360848838582033&#34;,&#34;0.49055029363897007&#34;,&#34;0.49224624716168&#34;,&#34;0.49591130268111816&#34;,&#34;0.4951932790046478&#34;,&#34;0.49595231887605623&#34;,&#34;0.5006001796445517&#34;,&#34;0.5025322706608095&#34;,&#34;0.4988268286009171&#34;,&#34;0.49511942477701776&#34;,&#34;0.4937426468789185&#34;,&#34;0.49392075842330213&#34;,&#34;0.49529929614562507&#34;,&#34;0.49666602419481015&#34;,&#34;0.4986641332159618&#34;,&#34;0.49806377862398726&#34;,&#34;0.49558396360417767&#34;,&#34;0.4957764220208092&#34;,&#34;0.4954403967836592&#34;,&#34;0.4971992585220218&#34;,&#34;0.49696911564537327&#34;,&#34;0.49656652090853365&#34;,&#34;0.4963921027096113&#34;,&#34;0.5004555905476983&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;2016904914&#34;,&#34;btcPrice&#34;:&#34;0.000024963088110953&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21388993239&#34;,&#34;price&#34;:&#34;1.0003438677145713&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.15&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.000400357879546&#34;,&#34;0.9997126067360349&#34;,&#34;1.0002864262312419&#34;,&#34;0.9990306013607333&#34;,&#34;0.9996281277025894&#34;,&#34;1.0001801913869788&#34;,&#34;1.000112080834013&#34;,&#34;0.9998221448047259&#34;,&#34;1.0006914671738822&#34;,&#34;1.0010002833226768&#34;,&#34;1.0001548975570813&#34;,&#34;1.0008648649990153&#34;,&#34;1.000217576130113&#34;,&#34;1.0003457350897718&#34;,&#34;0.9998352125731438&#34;,&#34;0.9993598514093966&#34;,&#34;1.0012320762499878&#34;,&#34;1.0017355712633162&#34;,&#34;0.9994405253689188&#34;,&#34;1.0004121131800483&#34;,&#34;0.9998238682840561&#34;,&#34;0.9998662771266619&#34;,&#34;1.0007009701908778&#34;,&#34;1.000246004815251&#34;,&#34;1.0000577567264675&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6992680824&#34;,&#34;btcPrice&#34;:&#34;0.000049917721093598&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13371264129&#34;,&#34;price&#34;:&#34;0.4297716572281429&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.42939125650203785&#34;,&#34;0.43033129399842107&#34;,&#34;0.431078111896934&#34;,&#34;0.4318859878379686&#34;,&#34;0.4357131618197005&#34;,&#34;0.43568381169625015&#34;,&#34;0.4346962887724402&#34;,&#34;0.4350131875819571&#34;,&#34;0.43469738319003864&#34;,&#34;0.43326982424487304&#34;,&#34;0.43263774502568014&#34;,&#34;0.43186553130359207&#34;,&#34;0.431263252334568&#34;,&#34;0.43111683005617996&#34;,&#34;0.4302721510566732&#34;,&#34;0.4320819334710277&#34;,&#34;0.4315871359240061&#34;,&#34;0.43020289947754364&#34;,&#34;0.42947852563217026&#34;,&#34;0.4299497834108291&#34;,&#34;0.42976407111236586&#34;,&#34;0.4299300749976332&#34;,&#34;0.4292928488934495&#34;,&#34;0.4288537810462236&#34;,&#34;0.4292925027383972&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;495911029&#34;,&#34;btcPrice&#34;:&#34;0.000021445847184989&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11966942111&#34;,&#34;price&#34;:&#34;33.68866002345648&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.35&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.75977114711794&#34;,&#34;33.875549349957005&#34;,&#34;34.01919374746187&#34;,&#34;34.25583589027168&#34;,&#34;34.33192527709708&#34;,&#34;34.34811446907118&#34;,&#34;34.327771426896376&#34;,&#34;34.39163652190693&#34;,&#34;34.37437113302313&#34;,&#34;34.210536634835925&#34;,&#34;34.010295904098804&#34;,&#34;34.02936173846428&#34;,&#34;34.021656312267595&#34;,&#34;33.98410608259004&#34;,&#34;33.9795976643615&#34;,&#34;34.13790010083734&#34;,&#34;34.02841083781576&#34;,&#34;33.89251492144723&#34;,&#34;33.931082525634466&#34;,&#34;33.89395892616255&#34;,&#34;33.87604093134362&#34;,&#34;33.75070349924242&#34;,&#34;33.71877565269129&#34;,&#34;33.68935808665655&#34;,&#34;33.72769888706939&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;1219289133&#34;,&#34;btcPrice&#34;:&#34;0.001681083064876425&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8494428951&#34;,&#34;price&#34;:&#34;0.06402638136568886&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.69&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06430001652573364&#34;,&#34;0.06437036408966565&#34;,&#34;0.06456880597204392&#34;,&#34;0.06502233408584714&#34;,&#34;0.06503812200415436&#34;,&#34;0.06503998592742274&#34;,&#34;0.06588520090979873&#34;,&#34;0.06601129659338578&#34;,&#34;0.06581176470778156&#34;,&#34;0.06553294673649296&#34;,&#34;0.06533678130300317&#34;,&#34;0.06510454153985605&#34;,&#34;0.0652560491458747&#34;,&#34;0.06506052972316402&#34;,&#34;0.06510842081151733&#34;,&#34;0.06540030324727246&#34;,&#34;0.06517726303881609&#34;,&#34;0.06480327467970981&#34;,&#34;0.06441097383830285&#34;,&#34;0.06427408194136594&#34;,&#34;0.06398680313872072&#34;,&#34;0.06394667133164467&#34;,&#34;0.06387224117079927&#34;,&#34;0.06399058225793666&#34;,&#34;0.0639027676630415&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;436312182&#34;,&#34;btcPrice&#34;:&#34;0.000003194952406663&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7357544988&#34;,&#34;price&#34;:&#34;0.8403176206733535&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8437744357312483&#34;,&#34;0.8509094697048541&#34;,&#34;0.8529940032792178&#34;,&#34;0.8540440777034858&#34;,&#34;0.8516241240942773&#34;,&#34;0.8496744646261335&#34;,&#34;0.8469999329838124&#34;,&#34;0.8481864165795252&#34;,&#34;0.8466077838956056&#34;,&#34;0.84420107235308&#34;,&#34;0.845768857513781&#34;,&#34;0.8473892819252429&#34;,&#34;0.8462819651259675&#34;,&#34;0.8429793643795672&#34;,&#34;0.8407670428178173&#34;,&#34;0.8420135800610185&#34;,&#34;0.8396289208490684&#34;,&#34;0.8390404745692586&#34;,&#34;0.8436660275627255&#34;,&#34;0.8429031749192385&#34;,&#34;0.8446341761886833&#34;,&#34;0.8443896855731904&#34;,&#34;0.8419779361544042&#34;,&#34;0.8397174244018213&#34;,&#34;0.8394101853515191&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;372500322&#34;,&#34;btcPrice&#34;:&#34;0.000041932321447266&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7317829106&#34;,&#34;price&#34;:&#34;6.360981538324465&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.78&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.39825823489953&#34;,&#34;6.409513679699773&#34;,&#34;6.429741803717237&#34;,&#34;6.456004351045777&#34;,&#34;6.48959781266168&#34;,&#34;6.502842344430388&#34;,&#34;6.494975652303574&#34;,&#34;6.498153272584972&#34;,&#34;6.477193762524708&#34;,&#34;6.4749696116534&#34;,&#34;6.446783196251528&#34;,&#34;6.4455937056715245&#34;,&#34;6.444181818657368&#34;,&#34;6.435492986540233&#34;,&#34;6.436547303303142&#34;,&#34;6.466312889575846&#34;,&#34;6.447237675580151&#34;,&#34;6.41666528202818&#34;,&#34;6.391078885651267&#34;,&#34;6.389256492722002&#34;,&#34;6.386113400232002&#34;,&#34;6.391088410611678&#34;,&#34;6.3824361673817265&#34;,&#34;6.38711565741988&#34;,&#34;6.370639494661183&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;339313908&#34;,&#34;btcPrice&#34;:&#34;0.000317416553006958&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6651371756&#34;,&#34;price&#34;:&#34;0.000011281998777579&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.81&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011388926295804&#34;,&#34;0.000011400691835227&#34;,&#34;0.000011433362145591&#34;,&#34;0.000011491345676996&#34;,&#34;0.000011523072429884&#34;,&#34;0.000011526229724601&#34;,&#34;0.000011561968127599&#34;,&#34;0.000011585318815413&#34;,&#34;0.000011497977586636&#34;,&#34;0.000011468707147471&#34;,&#34;0.000011434052857603&#34;,&#34;0.000011440212842081&#34;,&#34;0.000011463249880005&#34;,&#34;0.000011478357121817&#34;,&#34;0.000011468846589264&#34;,&#34;0.000011471460823979&#34;,&#34;0.000011419041373176&#34;,&#34;0.000011362068240029&#34;,&#34;0.000011356567844287&#34;,&#34;0.000011325850427243&#34;,&#34;0.000011281429685408&#34;,&#34;0.000011278520019523&#34;,&#34;0.000011289443476598&#34;,&#34;0.000011275707218214&#34;,&#34;0.000011274685827114&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;250238242&#34;,&#34;btcPrice&#34;:&#34;5.62978078e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330461694&#34;,&#34;price&#34;:&#34;0.9999703979870325&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0001442146345538&#34;,&#34;0.9995536933387662&#34;,&#34;0.9998892692241316&#34;,&#34;0.9989521525504824&#34;,&#34;0.9994530889305914&#34;,&#34;0.9997283495960755&#34;,&#34;0.9998553697654398&#34;,&#34;0.9995096259449162&#34;,&#34;1.00014999944705&#34;,&#34;1.000547118017383&#34;,&#34;1.0000224010848462&#34;,&#34;1.0003710762468978&#34;,&#34;0.9999957229272868&#34;,&#34;1.000138632701965&#34;,&#34;0.9996817467106764&#34;,&#34;0.9991772088092412&#34;,&#34;1.0006436972252386&#34;,&#34;1.0010853680974587&#34;,&#34;0.9996914621025487&#34;,&#34;1.0000324750917602&#34;,&#34;0.9998512870599147&#34;,&#34;0.9996994100302132&#34;,&#34;1.000348706734659&#34;,&#34;1.0000541769499978&#34;,&#34;0.9998893704838365&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;112548403&#34;,&#34;btcPrice&#34;:&#34;0.000049899084744341&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5777977546&#34;,&#34;price&#34;:&#34;0.06257536242514035&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.34&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06236865465429385&#34;,&#34;0.06246589991130288&#34;,&#34;0.06240843270681821&#34;,&#34;0.062249161574027316&#34;,&#34;0.06223099830897218&#34;,&#34;0.06264617941013605&#34;,&#34;0.06281452510294&#34;,&#34;0.06276275207762542&#34;,&#34;0.06268343841288901&#34;,&#34;0.06255691626086467&#34;,&#34;0.0624515709368335&#34;,&#34;0.062476261129714605&#34;,&#34;0.06256795462973794&#34;,&#34;0.06271174027019062&#34;,&#34;0.06268666754055147&#34;,&#34;0.06270030290942635&#34;,&#34;0.06269244944530315&#34;,&#34;0.06262885962844993&#34;,&#34;0.06254936036363117&#34;,&#34;0.06261284522092157&#34;,&#34;0.06264389726991014&#34;,&#34;0.06264798332735108&#34;,&#34;0.0625831711964946&#34;,&#34;0.06255397422463647&#34;,&#34;0.06256088048418898&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;476393303&#34;,&#34;btcPrice&#34;:&#34;0.0000031225457462&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5505713194&#34;,&#34;price&#34;:&#34;1363.2031078710097&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.97&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.13607829603&#34;,&#34;1351.4689477854226&#34;,&#34;1354.685548232379&#34;,&#34;1361.146588456366&#34;,&#34;1373.1112591782544&#34;,&#34;1375.4567308292258&#34;,&#34;1373.5021921077062&#34;,&#34;1374.5798088672896&#34;,&#34;1374.2047922199295&#34;,&#34;1370.3789875745763&#34;,&#34;1366.6984725193515&#34;,&#34;1364.1249946067635&#34;,&#34;1361.8843726971165&#34;,&#34;1360.6976138430425&#34;,&#34;1360.9309038296853&#34;,&#34;1368.6885054347988&#34;,&#34;1370.5874450713914&#34;,&#34;1365.461962666511&#34;,&#34;1364.4735182510437&#34;,&#34;1365.7899220819745&#34;,&#34;1362.8480784629835&#34;,&#34;1363.3474812485113&#34;,&#34;1360.955305440429&#34;,&#34;1357.8891999472016&#34;,&#34;1360.0744275952018&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;199194192&#34;,&#34;btcPrice&#34;:&#34;0.06801193339811255&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5412481870&#34;,&#34;price&#34;:&#34;6.969930495798301&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.08&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.7736642117361905&#34;,&#34;6.756076217414185&#34;,&#34;6.793449625987095&#34;,&#34;6.865859893412923&#34;,&#34;6.937483195481218&#34;,&#34;6.979515536920047&#34;,&#34;6.9478029429015224&#34;,&#34;6.9284625247560845&#34;,&#34;6.907914104712911&#34;,&#34;6.874769405900166&#34;,&#34;6.896114575710537&#34;,&#34;6.899743011599772&#34;,&#34;6.860135783871776&#34;,&#34;6.828443224761433&#34;,&#34;6.849180894331325&#34;,&#34;6.905242766177328&#34;,&#34;6.894209064572883&#34;,&#34;6.840607457650447&#34;,&#34;6.8472846441063595&#34;,&#34;6.887338045193232&#34;,&#34;6.895074852688421&#34;,&#34;6.8963663619066375&#34;,&#34;6.898867588802628&#34;,&#34;6.920380453888417&#34;,&#34;6.942104981178551&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;216610086&#34;,&#34;btcPrice&#34;:&#34;0.000347803448154187&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5074012202&#34;,&#34;price&#34;:&#34;17.13641663869069&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.71&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.254732588660875&#34;,&#34;17.31200366632601&#34;,&#34;17.356953304800275&#34;,&#34;17.445230081280297&#34;,&#34;17.540093125466566&#34;,&#34;17.549902978316823&#34;,&#34;17.521869854955458&#34;,&#34;17.57089756434244&#34;,&#34;17.511675802061724&#34;,&#34;17.428511702438602&#34;,&#34;17.401335012223097&#34;,&#34;17.365417972781653&#34;,&#34;17.33472548514147&#34;,&#34;17.32010883574378&#34;,&#34;17.321443260238883&#34;,&#34;17.384425161490732&#34;,&#34;17.365204350676155&#34;,&#34;17.330227378674756&#34;,&#34;17.297832611647273&#34;,&#34;17.269149869433907&#34;,&#34;17.235606352060426&#34;,&#34;17.226380111908966&#34;,&#34;17.183610217148228&#34;,&#34;17.154228049831918&#34;,&#34;17.14073387012898&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;194027380&#34;,&#34;btcPrice&#34;:&#34;0.00085511681924753&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4906769200&#34;,&#34;price&#34;:&#34;20047.548443013075&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.01&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20051.22405616085&#34;,&#34;20110.602103151356&#34;,&#34;20155.552573913872&#34;,&#34;20251.49133520362&#34;,&#34;20298.639411610195&#34;,&#34;20350.38567650615&#34;,&#34;20339.07972321146&#34;,&#34;20380.795072455694&#34;,&#34;20324.41856067999&#34;,&#34;20246.294276116678&#34;,&#34;20211.982370889044&#34;,&#34;20178.180919686867&#34;,&#34;20155.929604942034&#34;,&#34;20129.439096326205&#34;,&#34;20156.562287027326&#34;,&#34;20228.537582610592&#34;,&#34;20179.511202594982&#34;,&#34;20084.306927875485&#34;,&#34;20035.856862900007&#34;,&#34;20058.999071960046&#34;,&#34;20064.62454650722&#34;,&#34;20106.044277327273&#34;,&#34;20064.093791351774&#34;,&#34;20037.47288718635&#34;,&#34;20041.108561591907&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;57129733&#34;,&#34;btcPrice&#34;:&#34;1.000383932052315&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4073324125&#34;,&#34;price&#34;:&#34;13.084621617698701&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.79&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.874689417804111&#34;,&#34;12.977240987750184&#34;,&#34;12.999694810987828&#34;,&#34;13.05809448077896&#34;,&#34;13.134456340172274&#34;,&#34;13.166373400713976&#34;,&#34;13.174046618107784&#34;,&#34;13.156595139367123&#34;,&#34;13.136832518684233&#34;,&#34;13.059151743839621&#34;,&#34;13.024245747988846&#34;,&#34;13.009744454798474&#34;,&#34;13.00236212430498&#34;,&#34;12.99445359709676&#34;,&#34;12.964318799206644&#34;,&#34;13.07464583651195&#34;,&#34;13.11135570380746&#34;,&#34;13.089177553297818&#34;,&#34;13.154363371335887&#34;,&#34;13.339019272614035&#34;,&#34;13.38059705032621&#34;,&#34;13.329070205628852&#34;,&#34;13.167955047810006&#34;,&#34;13.134075321985312&#34;,&#34;13.114541673330065&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;353965112&#34;,&#34;btcPrice&#34;:&#34;0.000652929970990649&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3937336916&#34;,&#34;price&#34;:&#34;15.647475615435894&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.61&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.560986349984056&#34;,&#34;15.561097044869294&#34;,&#34;15.520784658634735&#34;,&#34;15.569346159010081&#34;,&#34;15.638549620210085&#34;,&#34;15.735124066059186&#34;,&#34;15.725775504001712&#34;,&#34;15.757115892473582&#34;,&#34;15.718908551335334&#34;,&#34;15.673810075767081&#34;,&#34;15.65842199459123&#34;,&#34;15.650604457573523&#34;,&#34;15.639913677498697&#34;,&#34;15.635944674900246&#34;,&#34;15.635934011171274&#34;,&#34;15.780030015908347&#34;,&#34;15.770980376150868&#34;,&#34;15.718037406084202&#34;,&#34;15.73374390923561&#34;,&#34;15.698092217209963&#34;,&#34;15.645888388583133&#34;,&#34;15.662334941562188&#34;,&#34;15.657692862530935&#34;,&#34;15.658427678670678&#34;,&#34;15.651430723013112&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;20334965&#34;,&#34;btcPrice&#34;:&#34;0.000780817825549038&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3814884067&#34;,&#34;price&#34;:&#34;53.83288610922342&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.99&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.290318948555985&#34;,&#34;54.34626044318356&#34;,&#34;54.51609336019526&#34;,&#34;54.71164008880007&#34;,&#34;54.84017873250239&#34;,&#34;54.85783258935826&#34;,&#34;54.84912409601398&#34;,&#34;54.79423800415394&#34;,&#34;54.77093043110981&#34;,&#34;54.48254700568355&#34;,&#34;54.35863553823271&#34;,&#34;54.35076863809225&#34;,&#34;54.43299144548598&#34;,&#34;54.449331741568095&#34;,&#34;54.488412361727285&#34;,&#34;54.59373560051482&#34;,&#34;54.57222140808168&#34;,&#34;54.40248925303921&#34;,&#34;54.262001807882896&#34;,&#34;54.387401501472056&#34;,&#34;54.22668757016522&#34;,&#34;54.28815807212204&#34;,&#34;54.12985595999811&#34;,&#34;54.040357931421696&#34;,&#34;53.819644242365854&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;497654367&#34;,&#34;btcPrice&#34;:&#34;0.002686291265625463&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3290400146&#34;,&#34;price&#34;:&#34;24.649343108539792&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.17&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.68367396586351&#34;,&#34;24.727036895780905&#34;,&#34;24.763295856196095&#34;,&#34;24.910218336026045&#34;,&#34;25.00389208839861&#34;,&#34;25.02149477638343&#34;,&#34;25.038245964336557&#34;,&#34;25.10263308087383&#34;,&#34;25.055084523451587&#34;,&#34;24.953428269092957&#34;,&#34;24.910919655194686&#34;,&#34;24.872098392385602&#34;,&#34;24.84677526683583&#34;,&#34;24.829253587428784&#34;,&#34;24.85251767680278&#34;,&#34;24.97486287058912&#34;,&#34;24.903255647556698&#34;,&#34;24.786341676773137&#34;,&#34;24.757136569969543&#34;,&#34;24.77671361589168&#34;,&#34;24.775220953410248&#34;,&#34;24.77964437393726&#34;,&#34;24.72653513513892&#34;,&#34;24.691788500146682&#34;,&#34;24.66401645750347&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;73030150&#34;,&#34;btcPrice&#34;:&#34;0.001230016071617061&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3273114521&#34;,&#34;price&#34;:&#34;28.140501120150788&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.94&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.570158653943103&#34;,&#34;27.588406181551&#34;,&#34;27.632000320786197&#34;,&#34;27.72407252402464&#34;,&#34;28.315134280524177&#34;,&#34;28.701663622553088&#34;,&#34;28.455510043787736&#34;,&#34;28.462425971003423&#34;,&#34;28.431530396764664&#34;,&#34;28.27063736534509&#34;,&#34;28.144183615836692&#34;,&#34;28.161764285728264&#34;,&#34;28.24699314130158&#34;,&#34;28.321875873800117&#34;,&#34;28.291281307917103&#34;,&#34;28.34170165566859&#34;,&#34;28.256604100945246&#34;,&#34;28.12194374001258&#34;,&#34;28.04349870994536&#34;,&#34;28.015776679784064&#34;,&#34;27.993885151967067&#34;,&#34;27.991073535808457&#34;,&#34;27.977179429599857&#34;,&#34;27.972384153914437&#34;,&#34;28.02967430353566&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;640206335&#34;,&#34;btcPrice&#34;:&#34;0.001404226818083098&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2707918735&#34;,&#34;price&#34;:&#34;148.92158922939615&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.86&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.0468911817187&#34;,&#34;146.24477782260104&#34;,&#34;146.1611566569247&#34;,&#34;146.98453497183345&#34;,&#34;147.5235053627857&#34;,&#34;147.81325448931747&#34;,&#34;148.28163857932623&#34;,&#34;149.09225665366174&#34;,&#34;147.89654979841282&#34;,&#34;145.94227441308016&#34;,&#34;145.47852845356343&#34;,&#34;145.43866042477168&#34;,&#34;145.09498381145283&#34;,&#34;145.00142611903777&#34;,&#34;145.08759558818358&#34;,&#34;145.5453373285789&#34;,&#34;144.85329513444134&#34;,&#34;144.49414383580302&#34;,&#34;144.05426723836575&#34;,&#34;144.03338234964409&#34;,&#34;143.95047428899073&#34;,&#34;144.06793141358014&#34;,&#34;144.9336130415516&#34;,&#34;146.03304503760864&#34;,&#34;146.64562578496188&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;133128018&#34;,&#34;btcPrice&#34;:&#34;0.007431270981799509&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2467034807&#34;,&#34;price&#34;:&#34;0.351673798601542&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.03&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3515342629988674&#34;,&#34;0.3521676081477334&#34;,&#34;0.35309919565030656&#34;,&#34;0.3541903724348078&#34;,&#34;0.3566526799226524&#34;,&#34;0.3568785361406288&#34;,&#34;0.356277927477052&#34;,&#34;0.35771179232442063&#34;,&#34;0.3576900736402804&#34;,&#34;0.35714880263121757&#34;,&#34;0.3558025051327707&#34;,&#34;0.35486724067376885&#34;,&#34;0.3544853650160468&#34;,&#34;0.3542064044813385&#34;,&#34;0.3546713478004645&#34;,&#34;0.3561494534958878&#34;,&#34;0.3545625893380675&#34;,&#34;0.35282669082243273&#34;,&#34;0.3527681768918396&#34;,&#34;0.35326837959402335&#34;,&#34;0.3529278529125966&#34;,&#34;0.3518398677577421&#34;,&#34;0.3511555905614255&#34;,&#34;0.35041871451434975&#34;,&#34;0.3509473897239541&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;136966633&#34;,&#34;btcPrice&#34;:&#34;0.000017548720156224&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2438288035&#34;,&#34;price&#34;:&#34;0.12067433082489741&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.39&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11886242818438897&#34;,&#34;0.11904460107249429&#34;,&#34;0.11897292310970312&#34;,&#34;0.11903996874083529&#34;,&#34;0.11937706226353863&#34;,&#34;0.11928353420436945&#34;,&#34;0.1193565730892674&#34;,&#34;0.11973240195034526&#34;,&#34;0.11981307931058192&#34;,&#34;0.11920048145769879&#34;,&#34;0.11897308489799317&#34;,&#34;0.11909057039936508&#34;,&#34;0.11882782289002976&#34;,&#34;0.11865911600653936&#34;,&#34;0.11887162326050421&#34;,&#34;0.1197869137342681&#34;,&#34;0.11950079292447616&#34;,&#34;0.11928192026253723&#34;,&#34;0.11961526003702445&#34;,&#34;0.11942045477321465&#34;,&#34;0.1201747085476815&#34;,&#34;0.12021463550029339&#34;,&#34;0.12017073726753241&#34;,&#34;0.12013352811417688&#34;,&#34;0.12028025924273718&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;205897153&#34;,&#34;btcPrice&#34;:&#34;0.00000602171691524&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2277494308&#34;,&#34;price&#34;:&#34;119.04483309875322&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.73&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.31973609743602&#34;,&#34;122.22980221659442&#34;,&#34;122.20905014823225&#34;,&#34;122.74951121547188&#34;,&#34;123.19407940957747&#34;,&#34;122.98427770012786&#34;,&#34;122.7489561074102&#34;,&#34;122.622367281349&#34;,&#34;122.2248259758892&#34;,&#34;121.53652687792291&#34;,&#34;121.05542080331115&#34;,&#34;121.09570305656003&#34;,&#34;121.35752961593165&#34;,&#34;121.36902633977782&#34;,&#34;121.44672955438497&#34;,&#34;121.88205553929767&#34;,&#34;121.74220497866185&#34;,&#34;121.27301183132361&#34;,&#34;120.83463832548642&#34;,&#34;120.93641071768519&#34;,&#34;120.8315292745319&#34;,&#34;120.63797684775939&#34;,&#34;120.29930074523377&#34;,&#34;119.25821090604583&#34;,&#34;118.92270187492353&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;191104067&#34;,&#34;btcPrice&#34;:&#34;0.005940404063088695&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2251605091&#34;,&#34;price&#34;:&#34;20014.08957204792&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20050.866782919587&#34;,&#34;20079.593668466954&#34;,&#34;20158.93074005341&#34;,&#34;20211.814480937664&#34;,&#34;20307.580914788625&#34;,&#34;20353.1967711348&#34;,&#34;20335.218938308455&#34;,&#34;20375.58916773032&#34;,&#34;20340.90091666203&#34;,&#34;20284.80368318787&#34;,&#34;20235.020272755173&#34;,&#34;20210.068846560098&#34;,&#34;20157.555056397156&#34;,&#34;20146.5180972688&#34;,&#34;20140.794626465147&#34;,&#34;20202.949742622426&#34;,&#34;20208.651894210692&#34;,&#34;20117.51422062349&#34;,&#34;20009.502650497943&#34;,&#34;20059.31662977737&#34;,&#34;20036.56127068938&#34;,&#34;20104.861221809813&#34;,&#34;20091.709684423215&#34;,&#34;20045.856019510316&#34;,&#34;20049.03126180772&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;24914977&#34;,&#34;btcPrice&#34;:&#34;0.9985283331137936&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2207150533&#34;,&#34;price&#34;:&#34;0.10974334546709036&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.22&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10964137644253408&#34;,&#34;0.11000036549663396&#34;,&#34;0.11025327160010467&#34;,&#34;0.11070373939431584&#34;,&#34;0.11104511865941227&#34;,&#34;0.11109857702436873&#34;,&#34;0.1110924929009018&#34;,&#34;0.11126352122246669&#34;,&#34;0.11094331934275127&#34;,&#34;0.11059613120859749&#34;,&#34;0.11052423450494585&#34;,&#34;0.11035632946250828&#34;,&#34;0.11018785138110065&#34;,&#34;0.11015497144568412&#34;,&#34;0.11030215116960462&#34;,&#34;0.1107740419247218&#34;,&#34;0.1105076809610223&#34;,&#34;0.11029154187446003&#34;,&#34;0.11018273316408501&#34;,&#34;0.11017177693325447&#34;,&#34;0.11029393462225603&#34;,&#34;0.11033990968249555&#34;,&#34;0.11003104029536713&#34;,&#34;0.10974935814949374&#34;,&#34;0.10970607763261775&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;22318097&#34;,&#34;btcPrice&#34;:&#34;0.00000547625460375&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2202604044&#34;,&#34;price&#34;:&#34;3.623631787992507&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.43&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.6761672965431966&#34;,&#34;3.690346882494526&#34;,&#34;3.694321108085478&#34;,&#34;3.7048560012992415&#34;,&#34;3.73751823983082&#34;,&#34;3.728316938499929&#34;,&#34;3.726590894963946&#34;,&#34;3.7324865567596524&#34;,&#34;3.7152125117728954&#34;,&#34;3.684688319254966&#34;,&#34;3.6728907302323908&#34;,&#34;3.6708852928250395&#34;,&#34;3.6833968889039204&#34;,&#34;3.681675727464209&#34;,&#34;3.6735385303585844&#34;,&#34;3.68851735340297&#34;,&#34;3.6772074269701442&#34;,&#34;3.6556508817867934&#34;,&#34;3.6478753216831095&#34;,&#34;3.6532070737188658&#34;,&#34;3.6532539985117367&#34;,&#34;3.655846529561597&#34;,&#34;3.6496531589122956&#34;,&#34;3.641619150851093&#34;,&#34;3.6350448305036016&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;221387588&#34;,&#34;btcPrice&#34;:&#34;0.000180821262344678&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1915986971&#34;,&#34;price&#34;:&#34;0.000290706063495791&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.58&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297478449646947&#34;,&#34;0.000299529084347598&#34;,&#34;0.00030173904471774&#34;,&#34;0.000299746687090643&#34;,&#34;0.000298962325969473&#34;,&#34;0.000302229563415801&#34;,&#34;0.0003030758001857&#34;,&#34;0.000301535490436218&#34;,&#34;0.000300445667829273&#34;,&#34;0.000299094184910521&#34;,&#34;0.000295609729343043&#34;,&#34;0.000294595264457835&#34;,&#34;0.000296162404748322&#34;,&#34;0.000295911048047322&#34;,&#34;0.000296318063575689&#34;,&#34;0.000297253381599039&#34;,&#34;0.000296125095840895&#34;,&#34;0.000294696904499816&#34;,&#34;0.000295907924600568&#34;,&#34;0.00029534892924621&#34;,&#34;0.000294197608224041&#34;,&#34;0.000291797039411577&#34;,&#34;0.000290714602896856&#34;,&#34;0.000292152287203858&#34;,&#34;0.000291804788850734&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;74988724&#34;,&#34;btcPrice&#34;:&#34;1.4506395917e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1808191015&#34;,&#34;price&#34;:&#34;1.8081910150452651&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.99&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8196832340882974&#34;,&#34;1.8253360632832465&#34;,&#34;1.8285082236543482&#34;,&#34;1.8347555694945936&#34;,&#34;1.8381094917557752&#34;,&#34;1.833948476565528&#34;,&#34;1.8341444284523087&#34;,&#34;1.8382997009905768&#34;,&#34;1.8395788091068113&#34;,&#34;1.8309599664678795&#34;,&#34;1.8205198309645931&#34;,&#34;1.8134085608529036&#34;,&#34;1.8119544734225412&#34;,&#34;1.807618265715021&#34;,&#34;1.8075767051605849&#34;,&#34;1.8193091119729712&#34;,&#34;1.8198679437765712&#34;,&#34;1.8137572972729035&#34;,&#34;1.8098615034125096&#34;,&#34;1.8192111410361753&#34;,&#34;1.8152701115769376&#34;,&#34;1.8113797407010894&#34;,&#34;1.809695001570721&#34;,&#34;1.8027164883512778&#34;,&#34;1.8056138298343074&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;11767205&#34;,&#34;btcPrice&#34;:&#34;0.00009022974767586&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1767788667&#34;,&#34;price&#34;:&#34;1.7060303676040545&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.29&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6890181082125528&#34;,&#34;1.6914682243282655&#34;,&#34;1.6953510291771732&#34;,&#34;1.7032242512223692&#34;,&#34;1.7136242682184002&#34;,&#34;1.7136009177534397&#34;,&#34;1.7149865876802517&#34;,&#34;1.7184074490109524&#34;,&#34;1.710995334162153&#34;,&#34;1.7048864523565708&#34;,&#34;1.699721441021863&#34;,&#34;1.7001328102878455&#34;,&#34;1.6965434775015982&#34;,&#34;1.6926828494491937&#34;,&#34;1.692977321870199&#34;,&#34;1.7017665013498764&#34;,&#34;1.6974412388606024&#34;,&#34;1.6883688699999264&#34;,&#34;1.6875445311679127&#34;,&#34;1.7026917327614273&#34;,&#34;1.702097981878996&#34;,&#34;1.706486937299897&#34;,&#34;1.7027386214094398&#34;,&#34;1.699999180886439&#34;,&#34;1.7047711097527554&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;138645103&#34;,&#34;btcPrice&#34;:&#34;0.000085131873964331&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1725716377&#34;,&#34;price&#34;:&#34;17.257163771405427&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.80&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.076100017021975&#34;,&#34;17.06662658749615&#34;,&#34;17.23481897642682&#34;,&#34;17.392304714899172&#34;,&#34;17.34806076924321&#34;,&#34;17.37896364967073&#34;,&#34;17.3987048654455&#34;,&#34;17.64170122029659&#34;,&#34;17.57215127384117&#34;,&#34;17.43018850760622&#34;,&#34;17.342435916635672&#34;,&#34;17.43421229530948&#34;,&#34;17.326630535156816&#34;,&#34;17.38049581884555&#34;,&#34;17.34490252708747&#34;,&#34;17.416262833529142&#34;,&#34;17.38170991715996&#34;,&#34;17.345059434798504&#34;,&#34;17.452270910242337&#34;,&#34;17.533734935028292&#34;,&#34;17.40508937928887&#34;,&#34;17.33541860238796&#34;,&#34;17.14838370106195&#34;,&#34;17.2545597608494&#34;,&#34;17.267555975917823&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;18740826&#34;,&#34;btcPrice&#34;:&#34;0.000860834790018754&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1631753976&#34;,&#34;price&#34;:&#34;5.551935397465494&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.42&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.56243119343507&#34;,&#34;5.567298776850595&#34;,&#34;5.576308807839807&#34;,&#34;5.601722240721692&#34;,&#34;5.625170729423998&#34;,&#34;5.620904303320557&#34;,&#34;5.636315942124946&#34;,&#34;5.635348964222284&#34;,&#34;5.621159554675177&#34;,&#34;5.60335716785942&#34;,&#34;5.5905571062639625&#34;,&#34;5.591457772922186&#34;,&#34;5.577783355017431&#34;,&#34;5.569307171726996&#34;,&#34;5.5721648533032235&#34;,&#34;5.588903896878948&#34;,&#34;5.583840701410947&#34;,&#34;5.565198217133781&#34;,&#34;5.559443292783233&#34;,&#34;5.562332394567694&#34;,&#34;5.561388614353593&#34;,&#34;5.553622727528361&#34;,&#34;5.542105541337092&#34;,&#34;5.541592730459978&#34;,&#34;5.542813312914228&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;110041642&#34;,&#34;btcPrice&#34;:&#34;0.000277044695973919&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579859986&#34;,&#34;price&#34;:&#34;6.016053153901669&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.0162195206336015&#34;,&#34;6.027382655786574&#34;,&#34;6.024819723237437&#34;,&#34;6.039340191092633&#34;,&#34;6.06724228192398&#34;,&#34;6.084822176339837&#34;,&#34;6.12213244622854&#34;,&#34;6.122207846967171&#34;,&#34;6.115223803839146&#34;,&#34;6.090144995430115&#34;,&#34;6.059958922242473&#34;,&#34;6.053464254579577&#34;,&#34;6.0451251289440755&#34;,&#34;6.038939121962651&#34;,&#34;6.0323637715058815&#34;,&#34;6.053924377605492&#34;,&#34;6.050910411565236&#34;,&#34;6.037034022086178&#34;,&#34;6.031591648330019&#34;,&#34;6.028034606779118&#34;,&#34;6.034399244728661&#34;,&#34;6.045367358311911&#34;,&#34;6.040906076591592&#34;,&#34;6.047392163677481&#34;,&#34;6.019846445406749&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;50408946&#34;,&#34;btcPrice&#34;:&#34;0.000300204432808511&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1571761839&#34;,&#34;price&#34;:&#34;0.023543205312770182&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.90&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.0237501279975899&#34;,&#34;0.023800623235562788&#34;,&#34;0.02386182467215722&#34;,&#34;0.023973179564354224&#34;,&#34;0.024039808529594694&#34;,&#34;0.024056225110206598&#34;,&#34;0.02401908035553596&#34;,&#34;0.02404102526204194&#34;,&#34;0.02399624253894211&#34;,&#34;0.023865905918825207&#34;,&#34;0.023792587646072907&#34;,&#34;0.02383798931505895&#34;,&#34;0.02381454971986665&#34;,&#34;0.02374267125916623&#34;,&#34;0.023764159130642643&#34;,&#34;0.023889551570007425&#34;,&#34;0.023861043642166995&#34;,&#34;0.023746804930897137&#34;,&#34;0.02370363220930435&#34;,&#34;0.023715067017245118&#34;,&#34;0.023689647696631462&#34;,&#34;0.02366682198719938&#34;,&#34;0.02359283729367599&#34;,&#34;0.02355808594946514&#34;,&#34;0.023547364902136332&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;106208870&#34;,&#34;btcPrice&#34;:&#34;0.000001174819174068&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1552779619&#34;,&#34;price&#34;:&#34;4.668818432714265&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.660082859245468&#34;,&#34;4.665507699491085&#34;,&#34;4.669686398275825&#34;,&#34;4.704354056302064&#34;,&#34;4.729879002222916&#34;,&#34;4.714593691596935&#34;,&#34;4.7230722097715105&#34;,&#34;4.727203946438871&#34;,&#34;4.714055794424472&#34;,&#34;4.703283518317288&#34;,&#34;4.699762821774249&#34;,&#34;4.69964584740277&#34;,&#34;4.69063433754996&#34;,&#34;4.676198352663021&#34;,&#34;4.698892938256321&#34;,&#34;4.723652915707889&#34;,&#34;4.719455323683941&#34;,&#34;4.711049093360597&#34;,&#34;4.724793283381334&#34;,&#34;4.7271290097513665&#34;,&#34;4.7273734867372195&#34;,&#34;4.730379137827014&#34;,&#34;4.7235237454969665&#34;,&#34;4.720485367387854&#34;,&#34;4.6901802237638766&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;57468350&#34;,&#34;btcPrice&#34;:&#34;0.000232976663208155&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1534767558&#34;,&#34;price&#34;:&#34;0.6996887438387233&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.50&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7016494769558138&#34;,&#34;0.7013306881258784&#34;,&#34;0.7024614313806439&#34;,&#34;0.7044272163104102&#34;,&#34;0.706472351768559&#34;,&#34;0.7093918654850726&#34;,&#34;0.7108366867405783&#34;,&#34;0.7107953770862832&#34;,&#34;0.7099623704106002&#34;,&#34;0.7073510016314243&#34;,&#34;0.7053811315549995&#34;,&#34;0.7070934961637594&#34;,&#34;0.7049849983052269&#34;,&#34;0.7044318506572336&#34;,&#34;0.7042526160893104&#34;,&#34;0.7067846665564811&#34;,&#34;0.7055964200659501&#34;,&#34;0.702908853201086&#34;,&#34;0.7014031290162064&#34;,&#34;0.7008240701784926&#34;,&#34;0.7005131590496823&#34;,&#34;0.7005243124438437&#34;,&#34;0.7002418763387208&#34;,&#34;0.7006899718611295&#34;,&#34;0.6999478391840782&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;139891161&#34;,&#34;btcPrice&#34;:&#34;0.000034914861473652&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1528956985&#34;,&#34;price&#34;:&#34;0.7644784926692474&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.93&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7860619259860426&#34;,&#34;0.7859435779761835&#34;,&#34;0.7861918029620322&#34;,&#34;0.7917396985406836&#34;,&#34;0.7933727507309073&#34;,&#34;0.7916402869669651&#34;,&#34;0.7935301886412963&#34;,&#34;0.7934006370508817&#34;,&#34;0.7896677909111062&#34;,&#34;0.786328322377868&#34;,&#34;0.7828512102910562&#34;,&#34;0.7826248077456216&#34;,&#34;0.7813942918727794&#34;,&#34;0.7768731927772912&#34;,&#34;0.774845353554199&#34;,&#34;0.7803342767455519&#34;,&#34;0.77748526325977&#34;,&#34;0.7734088316059472&#34;,&#34;0.7719538362717691&#34;,&#34;0.7713533598793996&#34;,&#34;0.769495822587314&#34;,&#34;0.7670542178675496&#34;,&#34;0.7655229591091727&#34;,&#34;0.7650383354395589&#34;,&#34;0.7645827066979348&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;44793226&#34;,&#34;btcPrice&#34;:&#34;0.000038147906345747&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1412651149&#34;,&#34;price&#34;:&#34;0.05802406951038318&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.55&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05770823380663813&#34;,&#34;0.05774903033415054&#34;,&#34;0.057915572884848006&#34;,&#34;0.05810678934296818&#34;,&#34;0.05824109880306974&#34;,&#34;0.05837365821928798&#34;,&#34;0.058391844857850296&#34;,&#34;0.058420669824922486&#34;,&#34;0.058284382479036986&#34;,&#34;0.05817173526970868&#34;,&#34;0.05807921716077961&#34;,&#34;0.058150643142977756&#34;,&#34;0.05809575095904357&#34;,&#34;0.05804683462479764&#34;,&#34;0.0580893171305297&#34;,&#34;0.05828383075476003&#34;,&#34;0.05829009517872864&#34;,&#34;0.05815108256774528&#34;,&#34;0.0580051333849642&#34;,&#34;0.05801242150604921&#34;,&#34;0.05805091278384359&#34;,&#34;0.058086412112980726&#34;,&#34;0.05802601718087566&#34;,&#34;0.05799056099286723&#34;,&#34;0.05800106767977079&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;45283049&#34;,&#34;btcPrice&#34;:&#34;0.000002895433672375&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1359957068&#34;,&#34;price&#34;:&#34;1.0013927267410865&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.04&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.9998387203956588&#34;,&#34;0.9991795416493741&#34;,&#34;0.9995865702781206&#34;,&#34;0.9984005488287919&#34;,&#34;0.9990889387633427&#34;,&#34;0.9992832524161939&#34;,&#34;0.9995431951063479&#34;,&#34;0.9992818968259785&#34;,&#34;0.9999311001849419&#34;,&#34;1.0002320414176233&#34;,&#34;0.9996418223412398&#34;,&#34;1.0001192349643087&#34;,&#34;0.9994764717300544&#34;,&#34;0.999750237165413&#34;,&#34;0.9992257829070216&#34;,&#34;0.9988855798280094&#34;,&#34;1.0006437036230644&#34;,&#34;1.0009904957198679&#34;,&#34;0.999193245743286&#34;,&#34;0.9998007410985583&#34;,&#34;0.9994672650160044&#34;,&#34;0.999284943092215&#34;,&#34;0.9999859949334076&#34;,&#34;0.9998286437331367&#34;,&#34;1.0012358617187662&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;6767350&#34;,&#34;btcPrice&#34;:&#34;0.000049960754228939&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1350919946&#34;,&#34;price&#34;:&#34;138.16992311843057&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.34&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.7723467133241&#34;,&#34;137.81098287130007&#34;,&#34;138.04298230548113&#34;,&#34;138.87720276266452&#34;,&#34;139.1125352948242&#34;,&#34;139.0565202511056&#34;,&#34;139.15754518214834&#34;,&#34;138.81990972517082&#34;,&#34;137.89167052928534&#34;,&#34;137.45970305588784&#34;,&#34;137.8392892605069&#34;,&#34;139.3612000005179&#34;,&#34;138.96346091827144&#34;,&#34;139.39944189729206&#34;,&#34;139.8843925606133&#34;,&#34;140.69574195419648&#34;,&#34;139.61694354017848&#34;,&#34;139.51555414127344&#34;,&#34;139.28222939653202&#34;,&#34;139.63783946225655&#34;,&#34;139.13542537008928&#34;,&#34;139.1870001137723&#34;,&#34;138.76031274500184&#34;,&#34;138.11612272152271&#34;,&#34;138.1792349583611&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;42126667&#34;,&#34;btcPrice&#34;:&#34;0.006894756801485859&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1317734147&#34;,&#34;price&#34;:&#34;55.77231444889979&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.02&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.447577507868715&#34;,&#34;54.128375568181134&#34;,&#34;54.23440566519872&#34;,&#34;54.73707935361438&#34;,&#34;55.29878160930527&#34;,&#34;55.12497748150301&#34;,&#34;55.42130584548864&#34;,&#34;55.15246246213931&#34;,&#34;55.040118775249475&#34;,&#34;54.79984173940808&#34;,&#34;54.611754004068196&#34;,&#34;54.73876823712405&#34;,&#34;55.106654437772995&#34;,&#34;55.11813142327622&#34;,&#34;55.12054367031947&#34;,&#34;55.11163738590538&#34;,&#34;54.99439078507999&#34;,&#34;54.85891721705598&#34;,&#34;54.880726546478314&#34;,&#34;55.13943236775162&#34;,&#34;55.325578824568346&#34;,&#34;54.93737596596585&#34;,&#34;54.86199424999812&#34;,&#34;54.96283000707188&#34;,&#34;55.16446737080449&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;64864466&#34;,&#34;btcPrice&#34;:&#34;0.002783069829542854&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1298860466&#34;,&#34;price&#34;:&#34;1.430169273900777&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.33&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.4215338154290353&#34;,&#34;1.425785384185857&#34;,&#34;1.4279580637852494&#34;,&#34;1.4343164461157478&#34;,&#34;1.44533506798751&#34;,&#34;1.4458980149471825&#34;,&#34;1.442887292689709&#34;,&#34;1.4491458802390045&#34;,&#34;1.4448918253453362&#34;,&#34;1.4395360524680738&#34;,&#34;1.4357054965075182&#34;,&#34;1.4363755324762233&#34;,&#34;1.4337583246701406&#34;,&#34;1.4332867553350375&#34;,&#34;1.4340648195360775&#34;,&#34;1.4392954516048504&#34;,&#34;1.4370648528031746&#34;,&#34;1.4305759187708895&#34;,&#34;1.424273534505395&#34;,&#34;1.423632350356118&#34;,&#34;1.4222169076306148&#34;,&#34;1.429703791180103&#34;,&#34;1.4313133859795066&#34;,&#34;1.4310736027395956&#34;,&#34;1.4305871899611713&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;27213833&#34;,&#34;btcPrice&#34;:&#34;0.000071366250381796&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281745288&#34;,&#34;price&#34;:&#34;0.21575033587212905&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.27&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2154110356391449&#34;,&#34;0.21556395298813918&#34;,&#34;0.21654088100155322&#34;,&#34;0.21734996911672455&#34;,&#34;0.21877239367594722&#34;,&#34;0.21947482492922862&#34;,&#34;0.21980181027276333&#34;,&#34;0.21907182102411207&#34;,&#34;0.21837999474902092&#34;,&#34;0.2179201134075193&#34;,&#34;0.21682795818287987&#34;,&#34;0.2159375839317586&#34;,&#34;0.21597299156806574&#34;,&#34;0.21581331430143438&#34;,&#34;0.2157003812381916&#34;,&#34;0.21633894865093503&#34;,&#34;0.21562618012273047&#34;,&#34;0.2148661902738402&#34;,&#34;0.2153024201330907&#34;,&#34;0.21718195675318105&#34;,&#34;0.21772335614790497&#34;,&#34;0.21670557578562155&#34;,&#34;0.21601186960613397&#34;,&#34;0.2160711796456044&#34;,&#34;0.215952009168073&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;229725419&#34;,&#34;btcPrice&#34;:&#34;0.00001076606299044&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273178433&#34;,&#34;price&#34;:&#34;0.8490855147764932&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.33&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8587964523939258&#34;,&#34;0.8597445619216338&#34;,&#34;0.8611496857436736&#34;,&#34;0.865552155362601&#34;,&#34;0.8666655073914699&#34;,&#34;0.8666063461880543&#34;,&#34;0.8661421792463039&#34;,&#34;0.8670202524108236&#34;,&#34;0.8645275388953965&#34;,&#34;0.8601521201043011&#34;,&#34;0.8593695662980281&#34;,&#34;0.8657494323265613&#34;,&#34;0.8583869608535049&#34;,&#34;0.8542343549878925&#34;,&#34;0.8530614390762854&#34;,&#34;0.8571744599552762&#34;,&#34;0.8555489791484138&#34;,&#34;0.8522001044539881&#34;,&#34;0.8506051562831319&#34;,&#34;0.8513661719170071&#34;,&#34;0.8515003055153064&#34;,&#34;0.850575906991854&#34;,&#34;0.8481896312377586&#34;,&#34;0.8476009622535644&#34;,&#34;0.8483798170565793&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;100046101&#34;,&#34;btcPrice&#34;:&#34;0.000042369844289705&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1215529426&#34;,&#34;price&#34;:&#34;1.5112467074624343&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.514949369280686&#34;,&#34;1.5184328905530695&#34;,&#34;1.5246699575717297&#34;,&#34;1.5386072083468705&#34;,&#34;1.5536094881641007&#34;,&#34;1.5570507422780526&#34;,&#34;1.5627604927137266&#34;,&#34;1.5612721472754483&#34;,&#34;1.5639154910163686&#34;,&#34;1.549373162283526&#34;,&#34;1.5394363442551757&#34;,&#34;1.541157697302903&#34;,&#34;1.5418482781453238&#34;,&#34;1.5543318570374773&#34;,&#34;1.5591142099647026&#34;,&#34;1.560413716352464&#34;,&#34;1.5550693678828413&#34;,&#34;1.5412619320882424&#34;,&#34;1.5279231319722841&#34;,&#34;1.529014575537172&#34;,&#34;1.525325737659197&#34;,&#34;1.523198905794472&#34;,&#34;1.5142615078205033&#34;,&#34;1.5076938986024802&#34;,&#34;1.50652345194352&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;13229981&#34;,&#34;btcPrice&#34;:&#34;0.000075412059874048&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1158473952&#34;,&#34;price&#34;:&#34;1.171933451171993&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.25&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1695001042910693&#34;,&#34;1.1712804054845907&#34;,&#34;1.1741562139239061&#34;,&#34;1.1794010183679478&#34;,&#34;1.1847650307406867&#34;,&#34;1.1855240685834143&#34;,&#34;1.1866371525249342&#34;,&#34;1.1885970359357818&#34;,&#34;1.1869956333747422&#34;,&#34;1.1822077005037634&#34;,&#34;1.1770242148628085&#34;,&#34;1.1761952521974657&#34;,&#34;1.1775290422699476&#34;,&#34;1.177151214850985&#34;,&#34;1.1815075119949334&#34;,&#34;1.1835245073019218&#34;,&#34;1.18137111136774&#34;,&#34;1.177728842314626&#34;,&#34;1.1772995574962846&#34;,&#34;1.1764908572426358&#34;,&#34;1.1761357894815425&#34;,&#34;1.1747314132837732&#34;,&#34;1.172519440065544&#34;,&#34;1.1703671222413707&#34;,&#34;1.169320968143335&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;182763466&#34;,&#34;btcPrice&#34;:&#34;0.000058480137724554&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Collegeboard Completion",
            "content": "Overview: . Overall I thought the quizzes were difficult, I need to study more of the vocab terms mentioned in the questions. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/10/03/collegboardcompletion.html",
            "relUrl": "/markdown/2022/10/03/collegboardcompletion.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] ==0: continue if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;burger and fries&quot;: 5.98, &quot;burger and drink&quot;: 4.98, &quot;fries and drink&quot;: 2.98, } total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) if item == &quot;fries&quot;: total += 1.99 if item == &quot;burger&quot;: total += 3.99 if item == &quot;drink&quot;: total += 0.99 if item == &quot;burger and fries&quot;: total += 5.98 #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 burger and fries $4.98 4.98 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "JavaScript Table",
            "content": "&lt;div id=&quot;javascriptTable&quot;&gt; &lt;/div&gt; &lt;script&gt; const data = [&quot;yasha&quot;,&quot;james&quot;,&quot;quinn&quot;,&quot;aaron&quot;] let table = document.createElement(&quot;table&quot;); let row = document.createElement(&quot;tr&quot;); for(let i=0; i&lt;data.length; i++){ let td=document.createElement(&quot;td&quot;); let node=document.createTextNode(data[i]); td.appendChild(node); row.appendChild(td); } table.appendChild(row); let div = document.getElementById(&quot;javascriptTable&quot;); div.appendChild(table); &lt;/script&gt; .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/09/25/javascript-table.html",
            "relUrl": "/markdown/2022/09/25/javascript-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Quiz plan",
            "content": "My quiz plan: . Create a quiz about chelsea that has questions that have specific answers that need to be typed and submitted | Brainstorm &amp; learn about how code.org works | Create: use what I know to start it by myself then get help if needed | Finalize: After creating the quiz, review it and run it myself to check and make sure its accurate | . Drafting: . For my code it was challenging for me to use an if statement to help me code a question that requires typing and submitting but I figured it out. . here is the code: onEvent(“button3”, “click”, function( ) { console.log(“answerbutton entered text: “ + getText(“text_input3”)); if (getText(“text_input3”) == “1905”) { setScreen(“question3”); } else { setScreen(“incorrectpage”); . Data Abstraction . An example of Data Abstraction in this program is the “font size” chart. It holds multiple selections that represent different sizes. A random number function takes a random size selection from the list and sets the default font size to that selection. . The point . The point of the assignment was to get comfortable with code.org but specifically java script. . # Managing Complexity . An example of complexity management in this quiz is the layout. The quiz is divided into two parts: pasword and exploration in the program. This can easily be seen in the first part of the code, each command has its own defined function. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/pbl/2022/09/11/design-idea.html",
            "relUrl": "/markdown/pbl/2022/09/11/design-idea.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "To Be Decided",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/java/2022/09/09/makingmyquiz.html",
            "relUrl": "/java/2022/09/09/makingmyquiz.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Remote Theme Change",
            "content": "Changing Remote Theme . By default, your web page has the theme minima, I changed that theme to a custom one. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/2022/09/05/remote-theme-change.html",
            "relUrl": "/jupyter/2022/09/05/remote-theme-change.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Dictionaries Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer # Questions regarding coding below. question_prompts = [ &quot;What is the name of the syntax that can pass variables in html? n n&quot;, &quot;What is it called for a command you give your computer? n n&quot;, &quot;Is it important to define your varibles? n n&quot;, &quot;If you do not definne your varibles what will happen when you try and run the code? n n&quot;, ] questions = [ Question(question_prompts[0], &quot;liquid&quot;), Question(question_prompts[1], &quot;input&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;syntax error&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you got 4 out of 4 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/python/2022/09/05/dictionaries-quiz.html",
            "relUrl": "/jupyter/python/2022/09/05/dictionaries-quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, Yasha!&quot;); . Hello, Yasha! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, yasha!&quot;; console.log(msg); . Hello, yasha! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(&quot;foobar&quot;); . foobar . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf, hobbies) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.hobbies = hobbies; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role, hobbies: this.hobbies}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;coding&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, hobbies: &#39;coding&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;hobbies&#34;:&#34;coding&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;yasha&quot;, &quot;yashakhoshini&quot;, 2025, &quot;soccer&quot;), new Person(&quot;james&quot;, &quot;jameshunter12&quot;, 2025, &quot;soccer&quot;), new Person(&quot;aaron&quot;, &quot;aaron-rub&quot;, 2025, &quot;videogames&quot;), new Person(&quot;quinn&quot;, &quot;gigtieup&quot;, 2025, &quot;lacrosse&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, hobbies: &#39;coding&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;yasha&#39;, ghID: &#39;yashakhoshini&#39;, classOf: 2025, hobbies: &#39;soccer&#39;, role: &#39;Student&#39; }, Person { name: &#39;james&#39;, ghID: &#39;jameshunter12&#39;, classOf: 2025, hobbies: &#39;soccer&#39;, role: &#39;Student&#39; }, Person { name: &#39;aaron&#39;, ghID: &#39;aaron-rub&#39;, classOf: 2025, hobbies: &#39;videogames&#39;, role: &#39;Student&#39; }, Person { name: &#39;quinn&#39;, ghID: &#39;gigtieup&#39;, classOf: 2025, hobbies: &#39;lacrosse&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;hobbies&#34;:&#34;coding&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, hobbies: &#39;coding&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;hobbies&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.hobbies + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfhobbiesRole . Mr M | jm1021 | 1977 | coding | Teacher | yasha | yashakhoshini | 2025 | soccer | Student | james | jameshunter12 | 2025 | soccer | Student | aaron | aaron-rub | 2025 | videogames | Student | quinn | gigtieup | 2025 | lacrosse | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Python Variables and Types . # variable of type string name = &quot;Yasha Khoshini&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 14 print(&quot;age&quot;, age, type(age)) # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;HTML&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print(&quot;langs[2]&quot;) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Yasha Khoshini &lt;class &#39;str&#39;&gt; age 14 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; langs[2] person {&#39;name&#39;: &#39;Yasha Khoshini&#39;, &#39;age&#39;: 14, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Yasha Khoshini &lt;class &#39;str&#39;&gt; . Defining InfoDB . InfoDb = [] # Append to List a Dictionary as a storage area that can be called in future code. InfoDb.append({ &quot;FirstName&quot;: &quot;yasha&quot;, &quot;LastName&quot;: &quot;khoshini&quot;, &quot;DOB&quot;: &quot;October 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;yashakhoshini@icloud.com&quot;, &quot;Worst EPL Team&quot;: &quot;Arsenal&quot;, &quot;Family Members&quot;: [&quot;Kian&quot;, &quot;Iyla&quot;, &quot;Hedieh&quot;, &quot;Reza&quot;] }) # InfoDb[0] InfoDb.append({ &quot;FirstName&quot;: &quot;kian&quot;, &quot;LastName&quot;: &quot;khoshini&quot;, &quot;DOB&quot;: &quot;April 14&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;kiankhoshini@icloud.com&quot;, &quot;Worst EPL Team&quot;: &quot;Crystal Palace&quot;, &quot;Family Members&quot;: [&quot;Yasha&quot;, &quot;Iyla&quot;, &quot;Hedieh&quot;, &quot;Reza&quot;] }) # InfoDb[1] print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;yasha&#39;, &#39;LastName&#39;: &#39;khoshini&#39;, &#39;DOB&#39;: &#39;October 5&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;yashakhoshini@icloud.com&#39;, &#39;Worst EPL Team&#39;: &#39;Arsenal&#39;, &#39;Family Members&#39;: [&#39;Kian&#39;, &#39;Iyla&#39;, &#39;Hedieh&#39;, &#39;Reza&#39;]}, {&#39;FirstName&#39;: &#39;kian&#39;, &#39;LastName&#39;: &#39;khoshini&#39;, &#39;DOB&#39;: &#39;April 14&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;kiankhoshini@icloud.com&#39;, &#39;Worst EPL Team&#39;: &#39;Crystal Palace&#39;, &#39;Family Members&#39;: [&#39;Yasha&#39;, &#39;Iyla&#39;, &#39;Hedieh&#39;, &#39;Reza&#39;]}] . For loop &amp; Printing Data . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Family Members:&quot;, &quot;, &quot;.join(d_rec[&quot;Family Members&quot;])) print(&quot; t&quot;, &quot;Worst EPL Team:&quot;, d_rec[&quot;Worst EPL Team&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . While Loop . # InfoDB is always greater than variable &quot;i&quot; because it proves the statement true or else there will be no output. def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . Recursive Loop . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . For Loop with Index . for index in range(len(InfoDb)): print_data(InfoDb[index]) . yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . Reversing A List . mylist = [5, 6, 7, 8, 9, 10] print(&quot;before&quot;, mylist) #Telling mylist to reverse mylist.reverse() # This is the reversed version print(&quot;after&quot;, mylist) . before [5, 6, 7, 8, 9, 10] after [10, 9, 8, 7, 6, 5] .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "First Quiz",
            "content": "class Question: def __init__(self, prompt, answer): # defines variables self.prompt = prompt self.answer = answer # this is my list of questions with question and answer choices question_prompts = [ &quot;What is a secotion of code that is on top of files with key-values? n(a)front matter n(b)variable&quot;, &quot;Is sytac used to format plain text known as Markdown? ? nyes/ nno&quot;, &quot;Does boolean mean a value is either true or false? nyes/ nno&quot;, &quot;Is a sequence two or more line of code? nyes nno&quot;, ] # answer questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;yes&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;yes&quot;), ] # prints score (correct answer = score + 1) def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you got 4 out of 4 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/python/2022/08/26/quiz.html",
            "relUrl": "/jupyter/python/2022/08/26/quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Bash Test",
            "content": "python --version python2 --version . Python 2.7.18 Python 2.7.18 . conda list . # packages in environment at /Users/hbadkoobehi/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.5 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /Users/hbadkoobehi/Library/Jupyter/kernels/bash python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 . jupyter kernelspec list . Available kernels: bash /Users/hbadkoobehi/Library/Jupyter/kernels/bash python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/bash/2022/08/25/jupyter-tests.html",
            "relUrl": "/jupyter/bash/2022/08/25/jupyter-tests.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "All About The Sikhism Religion",
            "content": "Information About The Sikhism Religion . Here is the link to my information about the Sikhism Religion .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/08/24/sikhism-religion.html",
            "relUrl": "/markdown/2022/08/24/sikhism-religion.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "My First Post",
            "content": "I enjoy playing soccer and I don’t enjoy school. I am now finalizing commit. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/08/20/first-post.html",
            "relUrl": "/markdown/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "First Notebook",
            "content": "print(&quot;hello&quot;) # Python code to demonstrate the working of # choice() and randrange() # importing &quot;random&quot; for random operations import random # using choice() to generate a random number from a # given list of numbers. print(&quot;A random number from list is : &quot;, end=&quot;&quot;) print(random.choice([1, 4, 8, 10, 3, 5, 99, 100, 100002, 403])) # using randrange() to generate in range from 20 # to 50. The last parameter 3 is step size to skip # three numbers when selecting. print(&quot;A random number from range is : &quot;, end=&quot;&quot;) print(random.randrange(20, 50, 3)) . hello A random number from list is : 100002 A random number from range is : 44 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/python/2022/08/20/first-notebook.html",
            "relUrl": "/jupyter/python/2022/08/20/first-notebook.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Pbl Binary",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2022/07/07/PBL-binary.html",
            "relUrl": "/2022/07/07/PBL-binary.html",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yashakhoshini.github.io/yasha-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yashakhoshini.github.io/yasha-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}