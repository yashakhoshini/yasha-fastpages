{
  
    
        "post0": {
            "title": "Hacks Week 25",
            "content": "Lossy Image . Lossy compression is a technique that permanently discards some of the original image data, resulting in reduced image quality. JPEG images are an example of lossy compression, where the degree of compression determines the amount of data that is discarded. Higher compression levels result in greater loss of data and lower image quality. | . Lossless Image . When you resize a PNG image, it maintains its pixel quality as it is a lossless format. Lossless compression techniques identify and represent patterns within image data in a more efficient manner. Consequently, the file size can be greatly reduced without compromising any information. | . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Face.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;Raphael.jpeg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 190 - (pixel[0]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average2, average, average, pixel[3])) else: image[&#39;gray_data&#39;].append((average2, average, average)) # Average 2 is what changes the color img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Face.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;Raphael.jpeg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 200 - (pixel[1]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average2, average, pixel[3])) else: image[&#39;gray_data&#39;].append((average, average2, average)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_data(path=Path(&quot;../images/&quot;), images=None): if images is None: images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;Face.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;Raphael.jpeg&quot;}, ] for image in images: image[&#39;filename&#39;] = path / image[&#39;file&#39;] return images def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) def image_management_add_html_grey(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() image[&#39;data&#39;] = np.array(img_data) image[&#39;gray_data&#39;] = [] for pixel in image[&#39;data&#39;]: average = (pixel[0] + pixel[1] + pixel[2]) // 3 average2 = 192 - (pixel[2]) if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average2, pixel[3])) else: image[&#39;gray_data&#39;].append((average, average, average2)) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) if __name__ == &quot;__main__&quot;: images = image_data() for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . -- original image -- . grey image - . -- original image -- . grey image - . . from PIL import Image, ImageFilter OriImage = Image.open(&#39;shaq.jpg&#39;) OriImage.show() display(OriImage) blurImage = OriImage.filter(ImageFilter.GaussianBlur(radius=15)) blurImage.show display(blurImage) .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/csp/Week25hacks",
            "relUrl": "/csp/Week25hacks",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Tangible Artifcats",
            "content": "Development Process . As of now our main focus is backend as we have our entire project plan and design laid out. We are slowly starting to break in roles and cover different jobs, mine being DevOps and backend. Another important job that I have taken on is the scripter. Seeing I have a good amount of knowledge as to how the stock market operates I was gived the scripters job where I write and script the game in the best way possible with the best vocab, scenarios, and questions. . Checklist . backend initiation &amp; begin coding | new group repository up and running with updated DumbTrade code | templates / bp projects organized game.html | portfolio.html | stockinformation.html | rec.html | . | Set roles &amp; jobs for everyone Yasha: DevOps, scripter, and backend worker | Quinn: HTML &amp; frontend worker | Kush: TBD | Luka: Backend &amp; Frontend worker | Anthony: TBD | . | Design | Most of Frontend work completed (quinn) | Recognizing DevOps necessities and requirements native to this project | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/dumbtrade/2023/03/13/tangible-artifacts.html",
            "relUrl": "/markdown/dumbtrade/2023/03/13/tangible-artifacts.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Reunion Project Roles",
            "content": "Roles . Scrum Master - Quinn . Frontend - Yasha . Backend - Aaron . DevOps - Kush .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/reunion%20project/2023/03/13/roles-reunion-project.html",
            "relUrl": "/markdown/reunion%20project/2023/03/13/roles-reunion-project.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Live Stock Data",
            "content": "{% set project = &quot;Home&quot; %} {% block body %} &lt;div style=&quot;text-align:center;&quot;&gt; &lt;h1&gt;Real Time Stocks&lt;/h1&gt; &lt;div id=&quot;Stocks&quot; style=&quot;margin-top: 200px&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; const ticker = [&quot;AAPL&quot;, &quot;NVDA&quot;, &quot;MSFT&quot;, &quot;TSLA&quot;, &quot;AMZN&quot;, &quot;DDOG&quot;]; const api_key = &quot;b7fa84afea6e45609dd289c0f21b9f62&quot;; let stocksdiv=document.getElementById(&quot;Stocks&quot;); function getStockPrice(tickerSymbol, api) { const url = `https://api.twelvedata.com/price?symbol=${tickerSymbol}&amp;apikey=${api}`; return fetch(url) .then(response =&gt; response.json()) .then(data =&gt; data.price.slice(0, -3)) .catch(error =&gt; console.error(error)); } function getStockQuote(tickerSymbol, api) { const url = `https://api.twelvedata.com/quote?symbol=${tickerSymbol}&amp;apikey=${api}`; return fetch(url) .then(response =&gt; response.json()) .catch(error =&gt; console.error(error)); } for (let i=0; i&lt;ticker.length; i++){ // i=0 is the first # it starts at, it ends at i&lt;ticker.length. console.log(ticker[i]) getStockQuote(ticker[i], api_key) .then(stockData =&gt; { getStockPrice(ticker[i], api_key) .then(stockPrice =&gt; { const exchange = stockData.exchange; const name = stockData.name; const nameElement = document.createElement(&quot;h2&quot;) const nameNode = document.createTextNode(name + &quot; (&quot; + exchange + &quot;)&quot;) nameElement.appendChild(nameNode) const priceElement = document.createElement(&quot;p&quot;) const priceNode = document.createTextNode(&quot;$&quot; + stockPrice) priceElement.appendChild(priceNode) stocksdiv.appendChild(nameElement) stocksdiv.appendChild(priceElement) console.log(name, stockPrice); }); }); } &lt;/script&gt; &lt;/div&gt; {% endblock %} .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/dumbtrade/2023/03/13/real-time-stock-data.html",
            "relUrl": "/markdown/dumbtrade/2023/03/13/real-time-stock-data.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) # organizing coins # Symbol, Name, and price . BTC Bitcoin 19203.20912786924 ETH Ethereum 1302.535600928555 USDT Tether USD 1.000094285368392 USDC USDC 1.000477661148097 BNB Binance Coin 270.00105525107205 XRP XRP 0.4897314042127202 BUSD Binance USD 1.0003009213568992 ADA Cardano 0.3660624589069799 SOL Solana 30.254407183042204 DOGE Dogecoin 0.058748961413204105 DOT Polkadot 6.069472359767447 MATIC Polygon 0.7868259700408456 DAI Dai 1.00045950757267 SHIB Shiba Inu 0.000010120129500166 TRX TRON 0.06362493936708112 STETH Lido Staked Ether 1293.6357849687838 WETH Wrapped Ether 1301.545746759449 UNI Uniswap 6.269707849441305 WBTC Wrapped BTC 19196.44969734286 AVAX Avalanche 15.754553577525822 OKB OKB 16.869579869774455 CAKE PancakeSwap 4.40893962367892 ATOM Cosmos 11.68714343028012 LTC Litecoin 51.39089480432234 FTT FTX Token 23.497306556423972 ETC Ethereum Classic 23.42441136851592 XMR Monero 141.11608602181957 XLM Stellar 0.11285616690108048 ALGO Algorand 0.3167857570029688 BTCB Bitcoin BEP2 19212.187914427504 CRO Cronos 0.10323077808698662 BCH Bitcoin Cash 107.85469374357216 ENS EnergySwap 19.353983535613075 NEAR NEAR Protocol 2.998530943311797 LUNC Terra Classic 0.000274653305505199 WEMIX WEMIX TOKEN 1.7872039849010353 QNT Quant 167.15447160866495 HT Huobi Token 7.82935155981905 FLOW Flow 1.4794075714098018 VET VeChain 0.022835859415336612 FIL Filecoin 5.0477849904337075 HBAR Hedera 0.061313944522773646 MANA Decentraland 0.6256132037754569 FRAX Frax 0.9995757664627505 ICP Internet Computer (DFINITY) 4.935016045950497 EGLD Elrond 53.78654374759491 IMX Immutable X 0.6308515794637338 XTZ Tezos 1.3670560843838389 SAND The Sandbox 0.7549307110020637 CHZ Chiliz 0.18089587388302542 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . Request Digital Coin . RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ . Begin Rapid API Code . import requests . url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } . response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) . End Rapid API Code . json = response.json() # convert response to python json object . Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form . - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions . - To read the result, Data Scientist of Developer converts JSON into human readable form . - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) . organizing coins . Symbol, Name, and price . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Night of the museum",
            "content": "Introduction . The Night of the Museum was a fascinating event, providing an opportunity for participants to learn, teach and socialize. As a participant myself, I found the experience both enjoyable and enlightening. The event allowed us to showcase our projects, interact with intellectual minds and gain a deeper understanding of backend and frontend interactions. In this essay, I will discuss my experience in detail and highlight the key takeaways from the event. . . Showcase of Projects . The Night of the Museum event provided a platform for us to showcase our projects to a wider audience. It was exciting to see the range of projects that other participants had created. As we presented our project, we were pleased to receive compliments and queries from those who came to view it. I noticed that some visitors were very intellectual and understood what we had coded and utilized to make our presentation unique. For example, one father was impressed with our use of API and asked what third party API we used and how we formatted it. This interaction not only validated our efforts but also inspired us to explore and integrate more third-party APIs in our future projects. . . Learning Opportunities . One of the most significant benefits of participating in the Night of the Museum event was the learning opportunities it provided. We had the chance to interact with a diverse range of projects and participants. Through this interaction, I was able to gain a better understanding of backend and frontend interactions. Specifically, I learned about the requirements necessary to allow frontend to interact with backend. This newfound knowledge inspired me to think more deeply about my own project, and I thought that our group could make a button or text box that allows people to type in any stock, and the data for that stock would be the output. The feedback and suggestions from other participants were invaluable in helping me improve my project and become a better programmer. . . Conclusion . In conclusion, the Night of the Museum event was a valuable experience that provided a unique opportunity to learn, teach, and socialize. The event showcased a wide range of projects, and I had the chance to interact with intellectual minds and gain a deeper understanding of backend and frontend interactions. The event was a great chance to meet new people, make new friends, and have fun with my existing friends. I look forward to participating in future events and expanding my knowledge further. Overall, the Night of the Museum was a positive and enriching experience, and I would encourage others to participate in similar events. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/notm/2023/03/13/notm-dumbtrade.html",
            "relUrl": "/markdown/notm/2023/03/13/notm-dumbtrade.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Model and API Stocks.py",
            "content": "Model stocks.py . from random import randrange from datetime import date import os, base64 import json from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash class Stock(db.Model): __tablename__ = &#39;stocks&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _ticker = db.Column(db.String(255), unique=False, nullable=False) _rating = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, ticker, rating=&quot;neutral&quot;): self._name = name # variables with self prefix become part of the object, self._ticker = ticker self._rating = rating # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def ticker(self): return self._ticker # a setter function, allows name to be updated after initial object creation @ticker.setter def ticker(self, ticker): self._ticker = ticker @property def rating(self): return self._rating # a setter function, allows name to be updated after initial object creation @rating.setter def rating(self, rating): self._rating = rating # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;ticker&quot;: self.ticker, &quot;rating&quot;: self.rating, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, ticker=&quot;&quot;, rating=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(ticker) &gt; 0: self.ticker = ticker if len(rating) &gt; 0: self.rating = rating db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None ## Created a database that stores stocks above &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initStocks(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; s1 = Stock(name=&#39;APPLE&lt;&#39;, ticker=&#39;APPL&#39;, rating=&#39;STONG SELL&#39;) s2 = Stock(name=&#39;NVIDIA&#39;, ticker=&#39;NVDA&#39;, rating=&#39;STRONG BUY&#39;) s3 = Stock(name=&#39;EXXON MOBILE&#39;, ticker=&#39;XOM&#39;, rating=&#39;NEUTRAL&#39;) stocks = [s1, s2, s3,] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for stock in stocks: try: &#39;&#39;&#39;add user/post data to table&#39;&#39;&#39; stock.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {stock.id}&quot;) . API stocks.py . from flask import Blueprint, request, jsonify from flask_restful import Api, Resource # used for REST API building from datetime import datetime from model.stocks import Stock stock_api = Blueprint(&#39;stock_api&#39;, __name__, url_prefix=&#39;/api/stocks&#39;) # API docs https://flask-restful.readthedocs.io/en/latest/api.html api = Api(stock_api) class StockAPI: class _Create(Resource): def post(self): &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name name = body.get(&#39;name&#39;) if name is None or len(name) &lt; 2: return {&#39;message&#39;: f&#39;Name is missing, or is less than 2 characters&#39;}, 210 # validate uid ticker = body.get(&#39;ticker&#39;) if ticker is None or len(ticker) &lt; 2: return {&#39;message&#39;: f&#39;Ticker ID is missing, or is less than 2 characters&#39;}, 210 &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; so = Stock(name=name, ticker=ticker) &#39;&#39;&#39; Additional garbage error checking &#39;&#39;&#39; rating = body.get(&quot;rating&quot;) if rating is not None: so.rating = rating &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database stock = so.create() # success returns json of user if stock: return jsonify(stock.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {name}, either a format occured&#39;}, 210 class _Read(Resource): def get(self): stocks = Stock.query.all() # read/extract all users from database json_ready = [stock.read() for stock in stocks] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps # building RESTapi endpoint api.add_resource(_Create, &#39;/create&#39;) api.add_resource(_Read, &#39;/&#39;) .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2023/03/13/model-stocks-py.html",
            "relUrl": "/markdown/2023/03/13/model-stocks-py.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "In your own words, what is a library? A library is a collection of pre-written code that provides commonly-used functionality that can be easily incorporated into a program. | . | Why are libraries useful when writing a program? . Libraries are useful when writing a program because they provide pre-written code that can be easily incorporated into your own program, which saves time and effort. | . | What keyword is used to add a pre-made library? . key word: import | . | Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. Explain your work/code . import random def main(): # Generate a random integer between 1 and 100 random_number = random.randint(1, 100) # Print the random number print(random_number) if __name__ == &#39;__main__&#39;: main() . 70 . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . the import random function defines a series of functions for generating or manipulating random integers | . | List a few other things that we can import other than random math | flask | os | sys | datetime | . | . import math # Use the sqrt function from the math module result = math.sqrt(300) print(result) . 17.320508075688775 . I am using the import statement to access the math module, which provides us with functions for doing math. Then, we use the math.sqrt() function to find the square root of 16 and print the result to the console. . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: . | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | . import random # create a list of colors and their probabilities colors = [&quot;green&quot;, &quot;green&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;, &quot;orange&quot;] # use the random.choices() function to generate a random color color = random.choices(colors, weights=None, cum_weights=None, k=1) # print the selected color print(color) . [&#39;orange&#39;] . Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? The RANDOM function is a function in some programming languages (such as Excel and Google Sheets) that generates a random number between a given range of values. In the case of RANDOM(12, 20), the function will generate a random number between 12 and 20, inclusive. | . | . Answer: The RANDOM(12, 20) function will generate a random number between 12 and 20, inclusive. This means that the possible numbers that can be outputted by the function are 12, 13, 14, 15, 16, 17, 18, 19, and 20. No other numbers outside of this range will be generated by the function. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/ap%20csp/unit%203/section%2014/section%2015/lesson/2023/03/13/lesson-14-and-15-hacks.html",
            "relUrl": "/ap%20csp/unit%203/section%2014/section%2015/lesson/2023/03/13/lesson-14-and-15-hacks.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Create Performance Task",
            "content": "Reporting Category Scoring Explanation . Program Purpose &amp; Algorithm Implementation | 2/2 | 4A &amp; 2B: On the game section of our website there is an option for how many shares of a certain stock you would like to purchase (the input), the program will then multiply the stock price by the imputed value and give the product of the equation as the amount spent (output). | . Here is an example of how the code will work- . &lt;body&gt; &lt;head&gt; &lt;script&gt; function notify() { alert(document.getElementById(&quot;result&quot;).innerHTML = &quot;Result: &quot; + result); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;script&gt; function multiplyByTwo() { var num = document.getElementById(&quot;numInput&quot;).value; var result = num * 141.86; alert(document.getElementById(&quot;result&quot;).innerHTML = &quot;Just confirming the transaction of $&quot; + result); } &lt;/script&gt; &lt;/body&gt; . Reporting Category Scoring Explanation . Data Abstraction &amp; Managing Complexity | 2/2 | 3B &amp; 3C: On the section of the website referred to as the “game” the output to the code above will be stored in a list and when called upon will subtract the stored (listed) values from your wallet (your cash holdings). The same information will be pulled to display a visual of your earning report when the game is finished playing. | . Here is an example of how the code will work- . def store_input_in_list(): input_list = [] input_value = input(&quot;Enter a value: &quot;) input_list.append(input_value) return input_list print(store_input_in_list()) . Reporting Category Scoring Explanation . Procedural Abstraction | 1/1 | 3B: The values that were stored in the list above will be pulled and added to the players/users wallet (cash holdings) to display a new cash holding price (output) | . An example of the code is shown below- . def add_to_10000(input_list): value = input_list[0] result = int(value) + 10000 return result input_list = [5] print(add_to_10000(input_list)) .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/dumbtrade/2023/03/13/individual-stock-project-blog.html",
            "relUrl": "/markdown/dumbtrade/2023/03/13/individual-stock-project-blog.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Reunion Project Idea",
            "content": "DumbTrade Idea #1 . Agile Manifesto . We will work together during school and at home, the key to our success is communication. If all the roles are defined then it will be easy to get work done. Another key factor that decides whether are project is good or not is time, the more time spent working on coding and brainstorming ideas, the better the outcome. Our motivation to work is obviously to get an A but also to make a running business that generates passive income. . Overview . For our reunion project we are going to code a website about a tradingview indicator that is used for trading. We are aiming to focus towards web design and efficency. This website is complemented by code for an indicator that analyzes trends and tells you when to buy and sell a stock. Another feature that we will add is an API that generates the top gainers and top losers in the stock market. Information will vary depending on the stock. . How we came across this idea . Our team wanted to find a way to apply our personal businesses to APCSP. This business can not only benefit us througout this class but also with money-making. The main aspect we aim to accomplish to exceed APCSP requirements is coding the website as well as the indicator. Along with that, I will utilize that specific code to sell the indicator on whop via tradingview using the apps; discord, tiktok, and instagram. . Why is this a good idea? . This is a good idea because I think the point of school is to prepare us for the real world. To me, it&#39;s important to use knowledge that was practiced and studied during school in different aspects of human endeavor. In this case, I am making money while learning in school so it&#39;s a win-win situation. If one fails, I&#39;ll always have the other. . APCSP Aspect . DumbTrade website . Business aspect . TradingView Script/Profile Discord Tiktok Instagram . Objectives for website . Shows information about DumbTrade | Links that lead to important sites concercing our project | Image or text revealing the indicator code used on PineScript via Tradingview | Web within the website showing our Tradingview profile | Top gainers and losers API | Purchase link | Link to socials | Link discord | . Rough Draft Code . Code works on PineScript via Tradingview but is not efficent. | . indicator(&quot;dumbtrade&quot;,overlay=true) src= input(close,title=&#39;Source&#39;) len1= 5 len2= 9 len3= 10 len4= 15 len5= 20 len6= 25 len7= 30 len8= 35 len9= 40 len10= 45 len11= 50 len12= 55 len13= 60 len14= 65 len15= 70 len16= 75 len17= 80 len18= 85 len19= 90 ema1= ta.ema(src,len1) ema2= ta.ema(src,len2) ema3= ta.ema(src,len3) ema4= ta.ema(src,len4) ema5= ta.ema(src,len5) ema6= ta.ema(src,len6) ema7= ta.ema(src,len7) ema8= ta.ema(src,len8) ema9= ta.ema(src,len9) ema10= ta.ema(src,len10) ema11= ta.ema(src,len11) ema12= ta.ema(src,len12) ema13= ta.ema(src,len13) ema14= ta.ema(src,len14) ema15= ta.ema(src,len15) ema16= ta.ema(src,len16) ema17= ta.ema(src,len17) ema18= ta.ema(src,len18) ema19= ta.ema(src,len19) color1= close &gt; ema1 ? color.rgb(3, 254, 3) : color.red color2= close &gt; ema2 ? color.rgb(3, 254, 3) : color.red color3= close &gt; ema3 ? color.rgb(3, 254, 3) : color.red color4= close &gt; ema4 ? color.rgb(3, 254, 3) : color.red color5= close &gt; ema5 ? color.rgb(3, 254, 3) : color.red color6= close &gt; ema6 ? color.rgb(3, 254, 3) : color.red color7= close &gt; ema7 ? color.rgb(3, 254, 3) : color.red color8= close &gt; ema8 ? color.rgb(3, 254, 3) : color.red color9= close &gt; ema9 ? color.rgb(3, 254, 3) : color.red color10= close &gt; ema10 ? color.rgb(3, 254, 3) : color.red color11= close &gt; ema11 ? color.rgb(3, 254, 3) : color.red color12= close &gt; ema12 ? color.rgb(3, 254, 3) : color.red color13= close &gt; ema13 ? color.rgb(3, 254, 3) : color.red color14= close &gt; ema14 ? color.rgb(3, 254, 3) : color.red color15= close &gt; ema15 ? color.rgb(3, 254, 3) : color.red color16= close &gt; ema16 ? color.rgb(3, 254, 3) : color.red color17= close &gt; ema17 ? color.rgb(3, 254, 3) : color.red color18= close &gt; ema18 ? color.rgb(3, 254, 3) : color.red color19= close &gt; ema19 ? color.rgb(3, 254, 3) : color.red plot(ema1,title=&#39;EMA 1&#39;,color=color1,editable=false,display= display.all - display.status_line ) plot(ema2,title=&#39;EMA 2&#39;,color=color2,editable=false,display= display.all - display.status_line ) plot(ema3,title=&#39;EMA 3&#39;,color=color3,editable=false,display= display.all - display.status_line ) plot(ema4,title=&#39;EMA 4&#39;,color=color4,editable=false,display= display.all - display.status_line ) plot(ema5,title=&#39;EMA 5&#39;,color=color5,editable=false,display= display.all - display.status_line ) plot(ema6,title=&#39;EMA 6&#39;,color=color6,editable=false,display= display.all - display.status_line ) plot(ema7,title=&#39;EMA 7&#39;,color=color7,editable=false,display= display.all - display.status_line ) plot(ema8,title=&#39;EMA 8&#39;,color=color8,editable=false,display= display.all - display.status_line ) plot(ema9,title=&#39;EMA 9&#39;,color=color9,editable=false,display= display.all - display.status_line ) plot(ema10,title=&#39;EMA 10&#39;,color=color10,editable=false,display= display.all - display.status_line ) plot(ema11,title=&#39;EMA 11&#39;,color=color11,editable=false,display= display.all - display.status_line ) plot(ema12,title=&#39;EMA 12&#39;,color=color12,editable=false,display= display.all - display.status_line ) plot(ema13,title=&#39;EMA 13&#39;,color=color13,editable=false,display= display.all - display.status_line ) plot(ema14,title=&#39;EMA 14&#39;,color=color14,editable=false,display= display.all - display.status_line ) plot(ema15,title=&#39;EMA 15&#39;,color=color15,editable=false,display= display.all - display.status_line ) plot(ema16,title=&#39;EMA 16&#39;,color=color16,editable=false,display= display.all - display.status_line ) plot(ema17,title=&#39;EMA 17&#39;,color=color17,editable=false,display= display.all - display.status_line ) plot(ema18,title=&#39;EMA 18&#39;,color=color18,editable=false,display= display.all - display.status_line ) plot(ema19,title=&#39;EMA 19&#39;,color=color19,editable=false,display= display.all - display.status_line ) buy= close &gt; ema1 and close &gt; ema12 and close &gt; ema17 and close &gt; ema19 sell= close &lt; ema1 and close &lt; ema12 and close &lt; ema17 and close &lt; ema19 buy1= ta.barssince(buy) sell1 = ta.barssince(sell) buyCond= buy1[1] &gt; sell1[1] ? buy : na plotshape(buyCond,title=&quot;Buy&quot;,text=&#39;BUY&#39;,color=color.rgb(3, 254, 3),textcolor=color.white, style=shape.labelup,location=location.belowbar,size=size.small,display= display.all - display.status_line) buy2= ta.barssince(sell) sell2 = ta.barssince(buy) sellCond= buy2[1] &gt; sell2[1] ? sell : na plotshape(sellCond, title=&quot;Sell&quot;,text=&#39;SELL&#39;,color=color.red,textcolor=color.white, style=shape.labeldown,location=location.abovebar,size=size.small,display= display.all - display.status_line) alertcondition(buyCond,&#39;Buy Alert&#39;,&#39;Buy Signal, TimeFrame={{interval}}&#39;) alertcondition(sellCond,&#39;Sell Alert&#39;,&#39;Sell Signal, TimeFrame={{interval}}&#39;) alertcondition(buyCond or sellCond,&#39;ALL Alerts&#39;,&#39;Signal, TimeFrame={{interval}}&#39;) if (buyCond) alert(&#39;Buy Signal&#39;, freq = alert.freq_once_per_bar_close) if (sellCond) alert(&#39;Sell Signal&#39;, freq = alert.freq_once_per_bar_close) .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/reunion%20project/2023/03/13/dumb-trade.html",
            "relUrl": "/markdown/reunion%20project/2023/03/13/dumb-trade.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Collegeboard Blog",
            "content": ". I was wrong because a binary search will work on any sorted list, regardless of whether the number of elements in the list is even. . . Answer D is correct aswell because procedures created to solve subproblems of a larger problem are called by name. . . I was wrong on this because I didn&#39;t know that a school provides a laptop or tablet computer to all students enrolled at the school. . . I was incorrect, answer C is correct aswell because the first statement removes the first 2 characters of oldString and assigns the result to tempString. The second statement removes the last 2 characters of tempString and assigns the result to newString. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/collegeboard/2023/03/13/collegeboard-blog.html",
            "relUrl": "/markdown/collegeboard/2023/03/13/collegeboard-blog.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Class and Object Terms",
            "content": "Object-oriented programming relies heavily on the concepts of classes and objects. A class serves as a blueprint or template for creating objects, defining their properties and methods, and serving as a design model for creating instances of the object. In contrast, an object is an instantiation of a class, possessing unique properties and methods. The utilization of classes and objects allows for a structured and organized method of creating and utilizing real-world objects and concepts in code, such as cars, animals, and bank accounts. It is crucial to understand the distinctions and functions of classes and objects in order to effectively implement and utilize object-oriented programming techniques in software development. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2023/03/13/class-object.html",
            "relUrl": "/markdown/2023/03/13/class-object.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "MCQ Test Corrections",
            "content": "Test Score . Q1 . Reasoning: This option is incorrect. The value of variable b is stored in the variable a. Then the value of the variable a (which now contains the original value of the variable b) is stored in the variable temp. Finally, the value of the variable temp (which now contains the original value of the variable b) is stored in the variable b. Both a and b store the original value of b. . Q2 . Reasoning: Careless error when reading question . Q3 . Reasoning: This option is incorrect. If input B is false, the resulting value coming out of the OR gate will be true (since the value of A is true). Since the value of C is true, the resulting value coming out of the AND gate is true. This result contradicts the statement. . Q4 . Q5 . Reasoning: The program results in an infinite loop so nothing is displayed. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/reunion%20project/2023/03/13/MCQ-corrections.html",
            "relUrl": "/markdown/reunion%20project/2023/03/13/MCQ-corrections.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "5.3 - 5.6 blog",
            "content": "5.3 Blog . Intentional or Purposeful bias . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . 60% of tiktok users are 16-24 | 23.7% of facebook users in the us aged between 25-34 | Tiktok is much faster pased than Facebook therefore teenagers and young adults are more addicted to it / enjoy it more. | Facebook mainly targets their audience towards the older portion | Tiktok content creators are mostly teenagers to very young adults. | Tiktok could potentially be harmful because it stimulates your brain to a unhealthy extent. People become addicted and therefore can&#39;t stop because it is their source of dopamine. | It is good business because tiktok is one of the most popular social media apps in the world right now. | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . Virtual assistants may have female voices because it&#39;s soothing to many. | This is purpoesful because people prefer a women&#39;s voice over a mans. | It could be harmful to masculinity | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . One algorithm that influences my decisions is ESPN because I do sportsbetting and ESPN stats convince me to make my decisions. | . 5.4 Blog . Crowdsourcing . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . To implement a crowdsource idea in our environment, I could organize activities that involve selecting one member from each group and forming a new group with participants from different groups. The new group members would then discuss ways to improve each other&#39;s projects and share at least one idea with everyone else. | . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . Yes our project could potentially be way better with crowdsourcing because I am sure many other people I know or my group members know have similar projects that inlude the overall subject of stocks. Sharing ideas / implementation techniques could help us both benefit. | . 5.5 Blog . Legal and ethical concerns . If you create a GitHub repository, you will be prompted to choose a license type for your software. The MIT License and GPL License are two popular options. The MIT License permits the use, modification, and distribution of the software with minimal restrictions on commercial and non-commercial use, as long as the original copyright and license notices are included. On the other hand, the GPL License allows for similar freedoms, but requires the source code to be made available to anyone who receives a copy and derivative works to be licensed under the same terms as the original software. . | In the context of software development, it is important to consider software licenses, digital rights, and legal and ethical considerations to protect intellectual property and ensure ethical practices. For instance, licensing can prevent software from being pirated and protect creators&#39; rights. These complex and interrelated topics impact the development, distribution, and use of software. . | If you were to create a license for personal use, the MIT License might be a good option as it allows for greater flexibility in the use and distribution of the software. . | . 5.6 Blog . Safe Computing . Describe PII you have seen on project in CompSci Principles. . I have seen many instances where peoples usernames, DOB&#39;s, and emails are used as part of a project. My project could potentially use dates to track when people bought and sold different types of stocks. | . What are your feelings about PII and your personal exposure? . Sharing PII is risky because you never know if the website you are sharing it to will use that information fraudulantly. Always make sure to confirm / check that your PII will not be used without your permission. | . Describe good and bad passwords? What is another step that is used to assist in authentication. . The difference between a good and bad factor is the guessing portion of it. Making it your birthday or your initial followed by your birthday simply just isn&#39;t smart because its easily guessable which is why face ID in my opinion is a better authentication route. | . Try to describe Symmetric and Asymmetric encryption. . Symmetric encryption is like using the same key to lock and unlock a door. The key is kept secret between the sender and receiver, and both use it to encrypt and decrypt the message. . | symmetric encryption is like having two keys, one to lock and one to unlock a door. One key is kept secret by the owner, while the other key is publicly available. The owner uses their secret key to encrypt the message, and anyone with the public key can decrypt it. This means that the message can be sent securely without the need for the sender and receiver to share a secret key beforehand. . | . Provide an example of encryption we used in AWS deployment. . In AWS, they use secret codes to lock up important stuff so that nobody can peek at it. For example, they put secret codes on their storage service called S3, and only people who have the right codes can see what&#39;s inside. AWS has a special tool called Key Management Service that helps them make these secret codes. It&#39;s like putting a lock on your diary so nobody else can read it! | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . One example of a phishing scheme I have learned about is the scam ads that pop up on popular websites like crunchyroll. Other techniques may include fake security notices or fake scenarios that make it seem like your in trouble or got hacked and you need to click the link to resolve it. | . Mort&#39;s Lesson . DHCP - Dynamic Host Configuration Protocol: A client/server protocol that automatically provides an Internet Protocol (IP) host with its IP address and other related configuration information such as the subnet mask and default gateway. . | When you type domain in browser an IP address will be returned . | When you go to github.io you get returned HTML | You also get HTTP | TCP - Trransmission Control Protocol, one of the main protocols in TCP/IP networks. | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/notes/2023/03/13/.3-notes.html",
            "relUrl": "/markdown/notes/2023/03/13/.3-notes.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "5.1 - 5.2 Project Blog",
            "content": "Beneficial effects . Allows people to view stock data and charting data easliy | Teaches people about stocks and how they work | Runs a stock simulation for beginners to get used to the market and market conditions. | Harmful Effect . Participants in our stock simulation game may develop a false sense of understanding how the stock market works and the level of risk involved. This can lead to unrealistic expecatations of returns, which may result in poor investment decisions in real life. | Digital Divide . Some concerns I may have for the Digital Divide include massive gap in learning, access to technology can impact a students education forever. Places in which technology is scarce can potentially cause a massive learning gap to occur. Here at Del Norte, we have a variety of options for technology however in Encinitas for example, there won&#39;t be advanced tech like at Del Norte. | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/notes/2023/03/13/.1-5.2-blogs.html",
            "relUrl": "/markdown/notes/2023/03/13/.1-5.2-blogs.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2023/03/07/2.2-images.html",
            "relUrl": "/2023/03/07/2.2-images.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Performance Task Part 2",
            "content": "Submission 1 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 0 | The stated goal of the program is to allow users to view animals and recognize them later, it mentions the underlying issue or artistic motivation behind it which was good. However, the description provided does not match the functionality shown in the video and conflates the input and output. | . Data Abstraction | 0 | 0 | Two code snippets are presented, one that demonstrates how data is stored in the list &quot;animalImages&quot;, and another that depicts the list &quot;animalList&quot;. However, the &quot;animalList&quot; is not used in either of the code snippets. The explanation provided mentions the content of &quot;animalList&quot; but also includes details about the images from &quot;animalImages&quot; which are stated to be in that list. | . Managing Complexity | 1 | 0 | The provided response includes two code segments that demonstrate the efficient storage of data in a list named &quot;animalImages&quot; and &quot;animalList&quot;. This effectively utilizes the capability of a list to store multiple variables in a shorter and more organized manner, thus simplifying the overall complexity of the code. Furthermore, the response explains the practical application of using a list to manage complexity and how it streamlines the overall program structure. | . Procedural Abstraction | 0 | 0 | The response features a student-created function named &quot;evaluateGuess&quot; that takes in one input, &quot;guess&quot; and demonstrates its usage in a separate code snippet. The function is described as determining the accuracy of the user&#39;s guess. However, it does not elaborate on how this function fits into the larger picture and contributes to the overall functionality of the program. | . Algorithm Implementation | 0 | 0 | The &quot;evaluateGuess&quot; function created by the student, includes elements of sequencing, iteration (using a for loop) and selection (utilizing an if statement) within the algorithm. The explanation provided gives a brief overview of the algorithm, but it lacks sufficient detail to allow someone to replicate it. | . . Submission 2 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The program aims to tap into the user&#39;s creativity by allowing them to express themselves through poetry using their own words. It displays poems based on the user&#39;s input of words and settings, resulting in a variety of poems with different word arrangements and another set of poems with different words but no articles. The program also outlines the inputs and outputs. | . Data Abstraction | 1 | 1 | Two pieces of code are given, one where data is being saved in a list called nounList, and the other where the data is being retrieved from that list under the name wordList when it is passed as an argument. The text explains that the data in the list is nouns that have to be in specific places in the poem for it to make sense. | . Managing Complexity | 0 | 1 | The code presented in the response attempts to make the process of generating poetry easier by using lists of words, but this approach is not optimal. Storing noun inputs in separate variables and calling them individually would have resulted in more readable code. Furthermore, using a different method, such as generating a random integer, to randomize selection would have been more efficient and resulted in less cluttered code, rather than having to write multiple statements for each possible integer generated. | . Procedural Abstraction | 1 | 1 | The response features a createPoems procedure that was created by a student, and which has four parameters that are used within it. It describes how the procedure plays a role in the overall program, by being used along with the inputs from the user and constructing poems based on the number of poems specified by the user and whether the user requested for articles to be included in the poems. | . Algorithm Implementation | 0 | 1 | The student-developed algorithm within the procedure, createPoems, attempts to incorporate sequencing, selection (if statement), and iteration (while loop) but it is not well structured. The response explains the poorly designed algorithm, it starts by defining a variable to count the number of poems generated and then defines an empty string, then it has an iteration that tries to generate as many poems as the user specified by running through the selection statements, which call articlePoem or noArticlePoem each time. However, it is not clear how these steps are organized and how the algorithm is supposed to work. | . Testing | 1 | 1 | The response explains two invocations of the procedure createPoems, which lead to different code being executed by changing the argument for the last parameter. The first one is createPoems(nounList, verbList, adverbList, 1) and the second one is createPoems(nounList, verbList, adverbList, 0). The last parameter represents the article preference setting. The response describes the conditions that the code tests, which are whether the user input is 1 or 0 for the article preference setting. | . . Submission 3 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 0 | 0 | The video showcases a program that purports to let the user pick two Marvel characters from a drop-down menu, and then displays their rankings and the winner of the battle using an image, but it is not well thought through. The response describes the supposed function of the program, the functionality demonstrated in the video, and the supposed input and output. The response describes the input as various button clicks to switch screens and the character names selected from each drop-down box, but it does not explain how these inputs lead to the output or the logic behind it. | . Data Abstraction | 1 | 1 | The response presents two pieces of code, one where information is being saved in a list called firstCharacterList and the other where that data is being accessed from the list using a loop. The data saved in the list is identified as the power rankings and the URL for the image of a character that was selected from a drop-down box. | . Managing Complexity | 1 | 1 | The response features a list that brings together six scores and a URL for an image of a character into one organized unit, this is done to simplify the program code. It explains that this list helps to streamline the code, and that without it, the program would require more parameters and more steps to determine the winner, making it more complicated. | . Procedural Abstraction | 1 | 1 | The response explains a findWinner procedure that compares the mean power rankings of two Marvel characters which are passed as inputs. The procedure alters the winner screen to show the character with the higher average and if the averages are the same, it shows a &quot;tie&quot; image. This procedure plays a crucial role in the overall program by determining the hypothetical victor in a fight between characters. | . Algorithm Implementation | 0 | 1 | The student-developed algorithm in the findWinner procedure attempts to use sequencing, selection, and iteration to compare the average power rankings of two characters selected from a drop-down menu, but it is not well-structured. The algorithm iterates through the list of each character, sums up the rankings, and divides by 6 to get the average, but it is not clear how these steps are organized. It then compares the averages using a conditional statement to determine the winner and display their name and image on the winner screen, but this approach is not efficient. | . Testing | 1 | 1 | The response explains two invocations of the procedure findWinner, with distinct arguments (Vision and Bishop; Carnage and Venom) that yield dissimilar outcomes. The response depicts how the procedure employs an if-else statement to establish the winner based on the mean ranking and presents the winner&#39;s image and name or a tie image accordingly. | . . Submission 4 . Reporting Category Student Score College Board Score Comments &lt;/tr&gt; Program Purpose and Function | 1 | 1 | The video showcases a program that aims to assess critical thinking abilities by gathering input through a text entry field for guessing an 8-letter word and displaying the matching letters. In the demonstration, the user inputs words in an attempt to correctly guess &quot;touching&quot; in 4 attempts, but failing to guess &quot;sandwich&quot; in 6 attempts. The input is a word the user inputs, and the output is the color scheme of the corresponding letters. | . Data Abstraction | 1 | 0 | | . Managing Complexity | 1 | 0 | The response presents two pieces of code, the first one where data is being saved in a list called &#39;guesses&#39;, in the second segment, the data is not being used directly but the length of the list is accessed. The response explains that the data saved in the list represents all the user&#39;s word inputs and that it is used to keep track of all the user&#39;s attempts and evaluate their performance. | . Procedural Abstraction | 1 | 1 | The response includes a student-developed procedure, isitcorrect, which compares a user input guess to the correct word or letter positions. The procedure is called in the program with the argument answer. The procedure checks the user&#39;s answer every time they input a guess and contributes to the overall program. | . Algorithm Implementation | 1 | 1 | The response features a isitcorrect procedure which was created by a student, that compares a user&#39;s input guess to the correct word or letter positions, this procedure is invoked in the program using the argument answer. The procedure examines the user&#39;s answer every time they input a guess, and it plays an important role in the overall program by providing feedback to the user on their performance. | . Testing | 0 | 0 | The response explains the situations being evaluated in the procedure, particularly &quot;if the user inputs the correct letter in the correct location&quot; and &quot;if the user inputs the correct letter in the incorrect location.&quot; It also details the outcome of these conditions, with the letter&#39;s color switching to green or yellow accordingly. The response does not mention the specific parameters used in the procedure&#39;s invocation. &lt;/tr&gt; Summary: The passages describe the results of two submissions for a performance task in computer programming. The task includes multiple categories such as Program Purpose and Function, Data Abstraction, Managing Complexity, Procedural Abstraction, and Algorithm Implementation. The first submission received low scores in all categories, with comments indicating that the program did not match the description provided and that some elements were not explained well enough. The second submission received higher scores, with comments praising the program&#39;s aim to tap into the user&#39;s creativity and its ability to generate a variety of poems based on input. &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; | | . | | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/java/2023/01/16/performace-task-2.html",
            "relUrl": "/markdown/java/2023/01/16/performace-task-2.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$NZF...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$LLf...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$iOB...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$5W1...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Bpx...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$NZF...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$LLf...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$pwK...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$5W1...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$Bpx...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$NZFZo9MgcZWiswEb$8f2400031d5a74a02a3abe23215554ff6f7b4c7e15a761587e7e7105f9c370e1&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$LLfWY1czmI0nCvIB$20a8a60bc24991c30038ae9976c66b3764193ade9b2f39561a7dace15bce573b&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$pwKmPHOZSTk5BRmH$17766eb3162740ba01745dbc7a33c2163ddfe6f872089ca461fc11dfd9538882&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$5W11yn1jwsPNXkbO$a8f8c882f56d42ced7c33b7ce99c692387f8553013795b082e9f8f7480f1fa67&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$BpxCYqFfdLBGPWGg$c6cc58469c7804c67e9ee87330ce273feee2737805348fd3ca51326013e4e710&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$NZFZo9MgcZWiswEb$8f2400031d5a74a02a3abe23215554ff6f7b4c7e15a761587e7e7105f9c370e1&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$LLfWY1czmI0nCvIB$20a8a60bc24991c30038ae9976c66b3764193ade9b2f39561a7dace15bce573b&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$pwKmPHOZSTk5BRmH$17766eb3162740ba01745dbc7a33c2163ddfe6f872089ca461fc11dfd9538882&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$5W11yn1jwsPNXkbO$a8f8c882f56d42ced7c33b7ce99c692387f8553013795b082e9f8f7480f1fa67&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$BpxCYqFfdLBGPWGg$c6cc58469c7804c67e9ee87330ce273feee2737805348fd3ca51326013e4e710&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf, stockNames): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf self._stockNames = stockNames @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if type(dob)== date: self._dob = dob # Type returns type of an object # If type is a date we are changing it @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def stockNames(self): return self._stockNames @stockNames.setter def stockNames(self, stockNames): self._stockNames = stockNames # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf, &quot;stockNames&quot; : self.stockNames } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob},classOf={self.classOf},stockNames={self.stockNames},)&#39; def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=1865, stockNames=[&quot;APPL&quot;, &quot;MSFT&quot;, &quot;NVDA&quot;, &quot;AMZN&quot;],) u2 = User(name=&#39;Yasha Khoshini&#39;, uid=&#39;yogs&#39;, password=&#39;yashakhoshini1000&#39;, dob=date(2007, 10, 5), classOf=2025, stockNames=[&quot;APPL&quot;, &quot;MSFT&quot;, &quot;NVDA&quot;, &quot;AMZN&quot;],) users = [u1, u2] tester(users, u2.uid, &quot;yashakhoshini1000&quot;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;stockNames&#34;: [&#34;APPL&#34;, &#34;MSFT&#34;, &#34;NVDA&#34;, &#34;AMZN&#34;]} * {&#34;name&#34;: &#34;Yasha Khoshini&#34;, &#34;uid&#34;: &#34;yogs&#34;, &#34;dob&#34;: &#34;10-05-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: 2025, &#34;stockNames&#34;: [&#34;APPL&#34;, &#34;MSFT&#34;, &#34;NVDA&#34;, &#34;AMZN&#34;]} JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;stockNames&#34;: [&#34;APPL&#34;, &#34;MSFT&#34;, &#34;NVDA&#34;, &#34;AMZN&#34;]} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$oaU1ChCSPEVVGBVK$9cbb9a0281d4c7625509aa346dfc41543939764f1ccab48ac6bb5c6ef331d623&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: 1865, &#39;_stockNames&#39;: [&#39;APPL&#39;, &#39;MSFT&#39;, &#39;NVDA&#39;, &#39;AMZN&#39;]} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_stockNames&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;stockNames&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$oaU1ChCSPEVVGBVK$9cbb9a0281d4c7625509aa346dfc41543939764f1ccab48ac6bb5c6ef331d623,dob=1847-02-11,classOf=1865,stockNames=[&#39;APPL&#39;, &#39;MSFT&#39;, &#39;NVDA&#39;, &#39;AMZN&#39;],) .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Boolean Expression, Conditionals, Nested Conditionals",
            "content": "isRaining = False result = not(isRaining) print(result) . True . grade = 75 # Has to be between 70 and 100 if grade &gt; 70 and grade &lt;= 100: print(&quot;You passed the quiz&quot;) . You passed the quiz . Logical Operator . A logical operator is a symbol or word used to connect two or more expressions Selection | The specific block of code that will execute depending on the algorithm condition returning true or false. Algorithm | A specific task that is completed with the use of instructions Conditional Statement / If-Statement: | A statement that affects the sequence of control by executing certain statements depending on the value of a boolean (true or false). | . SoccerMinutesPlayed = 48 if SoccerMinutesPlayed &gt; 40: print(&quot;you played over half the soccer game, congradulations!&quot;) else: print(&quot;You need to train more&quot;) # Adding another variation to the hack . you played over half the soccer game, congradulations! . import random a_list = [27, 32, 96,] random.shuffle(a_list) a_list[0] if a_list == 27: print(result) else: print(&#39;your number is not 27&#39;) # If statement . your number is not 27 . import random a=random.randint(1,100) print(a) . 44 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/2022/12/17/22-group-lesson-5-7.html",
            "relUrl": "/collegeboard/2022/12/17/22-group-lesson-5-7.html",
            "date": " • Dec 17, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Links to lesson notes",
            "content": "Grades . 0.85 1 0.85 0.88 0.9 0.92 . Key Vocabulary . Mathematical Expressions and Strings . Boolean Expression, Conditionals, Nested Conditionals . Boolean Iteration and Lists . Developing Algorithms and Binary Search . Calling and Developing Procedures . Libraries and Random Values . Simulations .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/lesson/collegeboard/2022/12/15/lesson-notes-links.html",
            "relUrl": "/python/lesson/collegeboard/2022/12/15/lesson-notes-links.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 3 Sections 16",
            "content": "Hack 1 . Create an idea for a simulation about coding and describe it. . Idea: simulation game about coding takes place in a virtual city where the player is a software engineer starting a new job. The game involves completing coding challenges to advance in the player&#39;s career and help the company succeed. As the player progresses, they are faced with increasingly complex challenges and must manage their time and resources. The game also includes city-building and management elements, where the player&#39;s success impacts the virtual city&#39;s growth and development. . Hack 2 . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack 3 . Explain the dice rolling game . The code has two functions, called parse_input and roll_dice. . - The parse_input function takes a string and checks if it&#39;s a number from 1-6. If it is, it returns the number. If it&#39;s not, it prints an error and exits. - The roll_dice function takes a number and simulates rolling that many dice. It does this by generating a random number between 1-6 for each die and storing the results in a list. It then returns the list of roll results. - The code then asks the user how many dice they want to roll and uses the parse_input function to parse the input. It then uses the roll_dice function to simulate rolling the dice and prints the results. . Hack 4 . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) ## ADDED CODE HERE num_sides_input = input(&quot;How many sides should the dice have? &quot;) num_sides = parse_input(num_sides_input) roll_results = roll_dice(num_dice) ## ENDS HERE print(&quot;you rolled:&quot;, roll_results) . you rolled: [3, 2, 4, 4] .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/hacks/2022/12/14/simulations.html",
            "relUrl": "/python/hacks/2022/12/14/simulations.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Notes on technical business extra credit",
            "content": "Notes on Kathleen . Career Journey Wells Fargo, Nikko Securities (1995-1996) | HP inc (1996-2004) | Qualcomm (2005-2018) | Finance major, first job at college was an investment major at Wells Fargo | She was also a stock broker | . | . HP Inc: Create technology that makes life better for everyone, every whre . | Qualcomm: Inventing the tech the world loves . | Thermo Fisher Scientific: Enable customers to make the world healthier, cleaner, and safer. . | . Main similarity = They all benefit the people. . Notes on Kris Porter . Software Engineer: SRE, DevOps, Infrastructure | Livermore hish school alum Enjoyed STEM classes | . | Enrolled at UCLA for Electrical Engineering Focus on cummonucation systems and computer networks | . | Master&#39;s degree in Electrical Engineering from Cal State LA | Center for Embeded Netwroked Sensors Networked Infomechanical Systems (NIMS) | Introduced to the Linux Operating Sytstem, Software Development | . | . Timeline . Finished graduate school, stock market had crashed meant there were no job opportunities (2008) | Systems Engineer at GPM (2010) | NB Universal, Streaming media infrastructure (2012) | Intro to DevOps, transition to Qualcomm (2014) | Working at Twitter... (2021) | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/markdown/2022/12/13/technical-business-extra-credit.html",
            "relUrl": "/python/markdown/2022/12/13/technical-business-extra-credit.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Button that says hi",
            "content": "PRESS THIS TO GET 3 . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/12/12/button-for-sapphin-hacks.html",
            "relUrl": "/markdown/2022/12/12/button-for-sapphin-hacks.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Calling and Developing Procedures",
            "content": "Topic 3.12 (3.A): . Procedure . A catch-all term for codes used to identify what was done to or given to a patient | . Parameter . A named variable passed into a function. | . Return Values . The values that a function returns when it completes. | . Output Parameters . The parameters that are fetched from the response of a service call. | . import math def find_square_root(num): # Calculate the square root of the given number sqrt = math.sqrt(num) # Return the square root return sqrt # Call the procedure to find the square root of 16 result = find_square_root(36) # Print the result print(result) # Output: 6.0 . 6.0 . The find_square_root() procedure takes a number as input and uses the sqrt() function from the math module to calculate its square root. It then returns the square root. The procedure is called and the result is printed which gives an output of 6.0 . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: c Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: d Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: b Correct :) Score: 3 / 3 . Topic 3.13 (3.B): . Abstraction is a powerful tool that allows people to hide the details of a specific implementation (the process of putting a decision or plan into effect; execution) and instead focus on the high-level logic of a program. By abstracting away program logic into separate, modular functions, a developer can create code that is easier to read, understand, and maintain. . def randomnumber(numbers): def find_sum(nums): total = 0 for num in nums: total += num return total def find_length(nums): length = 0 for num in nums: length += 1 return length sum_of_numbers = find_sum(numbers) length_of_numbers = find_length(numbers) average = sum_of_numbers / length_of_numbers return average result = randomnumber([10, 20, 50, 55, 600]) print(result) . 147.0 . def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot;Give me full credit, I added an abstraction right here&quot;) . Words starting with a: 1 Words starting with d: 1 . Topic 3.13 (3.C): . Procedure names . independent code module that fulfills some concrete task and is referenced within a larger body of source code. Arguement | a way for someone to provide additional information to a function. | . Visit the Button Link . &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/python/2022/12/09/calling-developing-procedures.html",
            "relUrl": "/collegeboard/python/2022/12/09/calling-developing-procedures.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Vocab and examples",
            "content": "Logical Operator . A logical operator is a symbol or word used to connect two or more expressions | . isSaturday = True isHoliday = False if not isHoliday: print(&#39;please start to work&#39;) else: print(&#39;take time off, it is a holiday!&#39;) . please start to work . Selection? . A seletion is a programming construct where a section of code is run only if a condition is met, it determines which path a program takes when it is running | . hasGas = True noGas = False if not noGas: print(&#39;you have gas already&#39;) else: print(&#39;you need to fill your car up with gas&#39;) . you have gas already . Iteration? . An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | . nums = [1,2,3,4,5] b = [] for i in nums: b.append(i**2) print(b) . [1] [1, 4] [1, 4, 9] [1, 4, 9, 16] [1, 4, 9, 16, 25] . Substring? . A substring is part of an existing string | . greeting = (&#39;what up everyone&#39;) print(greeting[:]) print(greeting[:5]) . what up everyone what . If statement . if proved true, performs a function | . x = 5 y = 10 if (x &gt; 0): print(&#39;x is greater than 0&#39;) else: print(&#39;x is less than 0&#39;) . x is greater than 0 . Variable . a value that can change depending on the conditions | . goalsScored = (&#39;you have scored 10 goals&#39;) print(goalsScored) . 10 . Jupyter . lets you write and run code at the same time | . Strings . series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. | . menu = (&#39;mexican food&#39;) print(f&quot;your type of food today will be: {menu}&quot;) . your type of food today will be: mexican food . Lists . sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. | . nums = [1,2,3,45,55] print(nums) . [1, 2, 3, 45, 55] . What is an algorithm? . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. | . winter = True summer = False if not winter: print(&#39;its summertime&#39;) else: print(&#39;its winter&#39;) . its winter . Adding more vocab: . Square brackets . [lists and tuples go inside]: | . For Loop . used for repeating a sequence | . Metadata . a set of data that describes and gives information about other data. | . Binary . a coding system using the binary digits 0 and 1 to represent a letter, digit, or other character in a computer or other electronic device. Calculate numbers by using the tens place method. | . Preprocessing . A step in the data mining and data analysis process that takes raw data and transforms it into a format (HTML) that can be understood and analyzed by computers and machine learning. | . Abstraction Process . Through the process of abstraction, a programmer hides all but the relevant data about an object in order to reduce complexity and increase efficiency. | . Liquid . Code that exits in the programming environment, but gets converted to something else when sent to the browser | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/python/2022/12/08/vocab-and-code.html",
            "relUrl": "/jupyter/python/2022/12/08/vocab-and-code.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 3 Sections 9 and 11",
            "content": "3.9.1 Hacks . 1) why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? It is important to know that algorithms that look different can do the same thing because you can have multiple sets of instructions that have the same output. On the other hand, algorithms can have different output but similar code which is also another reason why analyzation of code and little detials is important when trouble shooting. . NoMoney = False HasMoney = True if NoMoney == True: print(&quot;You need to work more.&quot;) else: if HasMoney == True: print(&quot;Spend it and make more&quot;) else: print(&quot;Have a good day&quot;) . Spend it and make more . isDay = False isNight = True # setting variables here (same as above to make comparison easier) Nighttime = not(isDay) and isNight if Nighttime == False: print(&quot;It&#39;s daytime&quot;) if Nighttime == True: print(&quot;It&#39;s nightime&quot;) . It&#39;s nightime . 3.9.2 Hacks . Steps: . Check to see if Chores or Assignments is &gt; 0 If chores &amp; assignemnts == 0 then it&#39;s done! | . | If chores and assignments &gt; 0 then repeat following steps until they are both 0. Chores = 5 then do 5 chores until it&#39;s 0 | Assignmentss = 19 then do 19 assignments. | . | Chores = 5 Assignments = 19 while (Chores or Assignments) &gt; 0: if Chores &gt; 0: Chores -= 1 if Assignments &gt; 0: Assignments -= 1 print(&quot;Chores left:&quot;,Chores,&quot;Assignments left:&quot;,Assignments) . Chores left: 0 Assignments left: 0 . 3.9.3 Hacks . Number Guessing Flowchart . import random num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 number = random.randint(1,100) print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;What number?&quot;) return int(num) def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;Nice Try!&quot;) lower_bound = guess elif guess &gt; number: print(&quot;Good luck next time! :(&quot;) upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 1 and 100. You guessed 5. Nice Try! Guess a number between 5 and 100. You guessed 6. Nice Try! Guess a number between 6 and 100. You guessed 8. Good luck next time! :( Guess a number between 6 and 8. You guessed 45. Good luck next time! :( Guess a number between 6 and 45. You guessed 23. Good luck next time! :( Guess a number between 6 and 23. You guessed 43. Good luck next time! :( Guess a number between 6 and 43. You guessed 32. Good luck next time! :( Guess a number between 6 and 32. You guessed 27. Good luck next time! :( Guess a number between 6 and 27. You guessed 24. Good luck next time! :( Guess a number between 6 and 24. You guessed 21. Good luck next time! :( Guess a number between 6 and 21. You guessed 12. Good luck next time! :( Guess a number between 6 and 12. You guessed 10. Good luck next time! :( Guess a number between 6 and 10. You guessed 13. Good luck next time! :( Guess a number between 6 and 13. You guessed 7. Guess a number between 6 and 13. You guessed the number in 14 guesses! . 3.11 Hacks . Indexing Code: (pasted below) | index = [12, 14, 43, 57, 79, 80, 99] mid = int(len(index) / 2) print(&quot;Index 1&quot;) print(f&quot;middle == {index[mid]}&quot;) . Index 1 middle == 57 . index = [92, 43, 74, 66, 30, 12, 1] mid = int(len(index) / 2) print(&quot;Index 2&quot;) print(f&quot;middle == {index[mid]}&quot;) . Index 2 middle == 66 . index = [7, 13, 96, 111, 33, 84, 60] mid = int(len(index) / 2) print(&quot;Index 3&quot;) print(f&quot;middle == {index[mid]}&quot;) . Index 3 middle == 111 . Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set one = 80 | Set two = 74 | Set three = 96 | . | Which of the following lists can NOT a binary search be used in order to find a targeted value? | a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer is C because it&#39;s not sorted. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/lesson%20plans/2022/12/07/developing-algoithms-and-binary-search.html",
            "relUrl": "/lesson%20plans/2022/12/07/developing-algoithms-and-binary-search.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Iteration . repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | . import random i = 10 while (i &lt; 100): print(&#39;you are less than 100 years old&#39;) i = i + 30 if (i &gt; 100): break . you are less than 100 years old you are less than 100 years old you are less than 100 years old . nums = [44, 55, 33, 66, 77, 88, 99, 100] for n in nums: if n % 2 == 0: print(&#39;This did not affect you at all&#39;) . This did not affect you at all This did not affect you at all This did not affect you at all This did not affect you at all . Iteration Statement . Iteration statements cause statements to be executed zero or more times, subject to some loop-termination criteria | . for i in range(100,105): i = i + 98 print(i) else: print(&#39;this is how you count from 198 to 202&#39;) . 198 199 200 201 202 this is how you count from 198 to 202 . a = [3,16,29,42,55,68,81] c = 2 while (c) &gt; 1: c +=1 print(a); c == 3 break . [3, 16, 29, 42, 55, 68, 81] . nums = [&quot;30&quot;, &quot;40&quot;, &quot;50&quot;, &quot;15&quot;, &quot;20&quot;, &quot;433&quot;] minimum = min(nums) print(minimum, &quot;This is the lowest number&quot;) # Part 2 low = (nums[0]) for i in range(len(nums)): if (nums[i]) &lt; low: low = nums[i] print(&quot;the lowest number in nums is:&quot;, low) . 15 This is the lowest number the lowest number in nums is: 15 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/lesson%20plans/2022/12/05/boolean-iteration-lists.html",
            "relUrl": "/lesson%20plans/2022/12/05/boolean-iteration-lists.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 3 Sections 12 and 13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/lesson/python/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/lesson/python/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3 Sections 12 and 13",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/lesson/python/2022/12/02/unit3-9-11.html",
            "relUrl": "/lesson/python/2022/12/02/unit3-9-11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Group Lesson 3.3 and 3.4 hacks & notes",
            "content": "Blogging . What is an algorithms? . An algorithm is a finite set of instruction that accomplish a task, it can be expressed by natural language, diagrams, and various other ways. | . What are the three parts of an algorithm? . Sequencing, selection, and iteration. . | Every algorithm can be created by a mixture of sequencing, selection, and iteration . | . Sequence? . A sequence is the order of how to do something to achieve a result, similarly to how you follow the instructions from a teacher. | . Selection? . A selection allows an algorithm to make a decision based on if a condition is met, an example of this is when your car is out of fuel, you go to the gas station to fill your car, but if your car is full you wouldn&#39;t go to the gas station. | . Iteration? . An iteration is a loop and doing something again until a condition is met, like you put away your computer when you are finished with your work. | . What is a Substring? . A substring is part of an existing string | . Personal Notes &amp; Topics to Study . Conditions within Iterations | Sequencing | Usage of SubStrings EX: print(string[5:10]) | . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . You will describe the different parts of an algorithm, sequencing, selection, and iteration in the image below. | . sequencing: 1, 2 | Selection: 3, 5 | Iteration: 4 | . CrossWord Puzzle Hack . Recursive | Selection | Sequence |",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/lesson%20plans/2022/11/30/3.3-3.4-lesson-notes.html",
            "relUrl": "/lesson%20plans/2022/11/30/3.3-3.4-lesson-notes.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Section 8 - Iteration . Section Objectives: . Express an algorithm that uses iteration without using a programming language | Determine the result or side effect of iteration statements | Write iteration statement | . Section Vocabulary: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop. . . Unit 3 Section 8.1 . Unit 3 Section 8.1 - Taiyo Iwazaki . Lesson Objectives: . Express an algorithm that uses iteration without using a programming language | Define an iteration | The Basics Of Iteration | Examples | LESSON Vocab: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Before we dive deeper, we need to understand that an iteration is a part of an algorithm. And in that iteration is a set of instructions that need to be followed until a certain desired output is met. . Examples . Here is an example using online shopping: . . Lets say you are looking for a lost item inside of your house... What steps would you take? . Suppose there are n rooms to search... number the rooms 1-n . | Start by searching in room number 1 . | Search each room thoroughly for you item. . | Change the room number to the next highest number . | Repeat steps 3 and 4 until you have found your lost item. . | Enjoy the lost item. . | WAIT! There is a flaw in the program. . This is where a stopping condition is useful for when the iteration already meets the desired requirement and gets out of the loop. . Programming Examples . i = 0 while (i &lt; 5): print(&quot;Hello, World!&quot;) i = i + 1 . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . i = 0 while (i &lt; 10): #Try changing the 5 and see what happens! print(&quot;Hello, World!&quot;) i = i + 1 if (i == 7): #Try Changing the 3 and see what happens! break . Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! Hello, World! . These are just a few examples of what you can do with iteration. . Summary: . An Iteration is a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | We can use stopping conditions to stop an iteration if a condition is already met | . Unit 3 Section 3.8.2 . Unit 3 Section 3.8.2 - Parav Salaniwal . Lesson Objectives . Determine the result or side effect of iteration statements | Learn how to use iterations with for loops and while loops | Creating code to learn how to incrementally list numbers | Learn the range function and using variables in code | . Definition: Iteration Statement - cause statements to be executed zero or more times, subject to some loop-termination criteria . The first function we will learn is the range function, which we will use with for loop. As you may be able to guess, this will give us the sum based on the input provided. We always use a variable, such as i, to represent what the range of numbers the output will show. For example, if I wanted to list the numbers from 1-10 using the range function, it would look like this: . for i in range(11): print(i) . 0 1 2 3 4 5 6 7 8 9 10 . Now the first thing you may notice is my input for the range was 11, and you may wonder why is it not 10? This is because when using the range function, the last number, or the ending value, is not included in the output, therefore we would have to add 1 to receive the correct output. Now if we were looking to include a starting value to have it start from 1 and end at 10, the code would look like this: . for i in range(1,11): print(i) . 1 2 3 4 5 6 7 8 9 10 . When using the range with for loop, the you can list much more than just a increment of one, would anyone like to guess how we could include a change in the incremented value? Try making a change in the python code above to change the incremented value. When using the range function: . for i in range(starting value, ending value, incremented value): print(i) . Now with while loops, we can provide a similar output with a variation in the input. Similar to for loops, it requires a variable which is the starting value. . i=1 while i&lt;=10: print(i) i=i+1 . 1 2 3 4 5 6 7 8 9 10 . Based on your knowledge from for loops, which values in the code above are the starting, incrementing, and ending values? . LESSON . . Unit 3 Section 3.8.3 . Unit 3 Section 3.8.3 - Nikhil . Here is some basic code I have created, let&#39;s first look into this one: I created a list of pets, cat, dog, fish, and snake. Then I created a for loop, &quot;for i in pets&quot; and this looks at every element/value in pets, so &quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot; and &quot;snake&quot;. This next if statmenets checks if the element in the list is &quot;fish&quot; and if it is, it breaks the loop. The statement would just print, cat and dog since the loop breaks at fish. . pets = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;snake&quot;] for i in pets: if i == &quot;fish&quot;: break print(i) . cat dog . This while loop checks if number less than 10 is even and if so, it will print out the even numbers. We set a starting value of number = 0, then while the number is less than 10, the percent sign means modulus so meaning if there is a remaninder when we dvide. So if number divided by 2 has no remainder then it will print number. Then after that it will add 1 to the number and repeat the process untill it reaches 10. So let&#39;s check for 0, while 0 is less than ten, then it moves to next statement, since 0 divded by 2 has a remainder of 0 it will print the value of 0. Now it will add 1 to zero. Then it will see that 1 is less than ten, and then check if 1 divided by 2 has a remainder of 0 which it does not, so it skips the print, and goes straight to addding one, so on so forth. . number = 0 while number &lt; 10: if number % 2 == 0: print(number) number += 1 . 0 2 4 6 8 . The purpose of this code is to find the sum of all the even numbers between and any number of your choosing. The integer input asks for the minimum and maximum value. The next statement puts a starting sum value set to 0. The for i in range (minimum,maximum+1) looks at every number between those two values, in this case 1 and 100. Then the if i modulus 2 checks if any numbers that are divisible by 2 and the remainder comes to 0. If there is a number that has a remainder of 0 when divided by 2, it adds that number to the sum. Then the last print statement, prints out the final sum of all even numbers between the two numbers of your choosing. . minimum = int(input(&quot;please enter a minimum number you want your range to be&quot;)) maximum = int(input(&quot;please enter a number that you want to be the maximum value&quot;)) sum = 0 for i in range(minimum,maximum+1): if i % 2 == 0: sum += i print(&quot;The sum of all the even numbers between&quot;, minimum, &quot;and&quot;, maximum, &quot;:&quot;, sum) . The sum of all the even numbers between 1 and 3 : 2 . LESSON . . HACKS Unit 3 Section 8 . Hacks Unit 3 Section 3.8.1 . Define an Iteration | Make your own example of an iteration with at least 4 steps and a stopping condition(Similar to mine that I did) | Program a simple iteration. | Hacks Unit 3 Section 3.8.2 . What is an iteration statement, in your own words? | Create a descending list of numbers using for loop | Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | Hacks Unit 3 Section 3.8.3 . Put Hacks Here . . Section 10 - Lists - Luna Iwazaki, Ethan Tran . Section Objectives: . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | . Section Vocabulary: . Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) . Essential Knowledge: . List procedures are implemented in accordance with the syntax rules of the programming language . | Iteration Statements can be used to traverse a list . | !!! AP EXAM provides pseudocode for loops | Knowledge of existing algorithms that use iteration can help in constructing new algorithms: | . Unit 3 Section 10 . Section 10 - Lists . Since CS is taught in different languages the pseudocode represents fundamental programming concepts. . AP Exam Reference Sheet . provides basic operations on lists | provides pseudocode for loops | helps you understand code used in questions | students can use this reference sheet in the AP Exam | . APCSP Testing Reference Sheet . If you looked at the reference sheet and seem to not understand some concepts here is a Khan Academy resource which can help you understand specific topics. . Khan Academy Resource . APCSP Create Task . Unit 3.10 (Ethan Tran) . Traversing a list is the process of visiting each element in a list in a sequential order. It can be used to access, search for, and modify elements in the list. | . Traversing Lists . 1) Complete Traversal: All elements in a list are assessed . 2) Partial Traversal: Only a given portion of elements are assessed . 3) Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. . Quick Lists Reference Sheet . A given element of a list can be evaluated using index, [ ] | . 1) Ex. listName[i] 2) Ex. listName[3] . insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . . A loop such as the example above allows a user to access each item within the list . College Board Example Question . &lt;/html&gt; &lt;/div&gt; &lt;/div&gt; . HACKS Unit 3 Section 10 . Find the lowest value in a list (Luna Iwazaki) . Use the list made bellow | Make a variable to hold the minimum and set it to potential minimum value | Loop | Check each element to see if it is less than the minimum variable | If the element is less than the minimum variable, update the minimum | After all the elements of the list have been checked, display the minimum value | . nums[&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] min . Lists Quiz (Ethan Tran) . Take a screenshot of your score on put it on your review ticket! . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . . . College Board Reference Sheets . List Operations . . &lt;/div&gt; .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "relUrl": "/lesson%20plans/2022/11/28/Unit_3.8_3.10.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 34 17 52 26 13 40 20 10 5 16 8 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 13 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) . (Extra credit: If your code is more efficient it will recieve a higher grade.) . | . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment for Algorithm Efficiency . Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) . | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | . Hacks Overview . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) . (Extra credit: If your code is more efficient it will recieve a higher grade.) . | Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) . | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2022/11/28/Quinn&Group.html",
            "relUrl": "/2022/11/28/Quinn&Group.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Variables, Assignments, and Data Abstractions",
            "content": "3.1.1 . Blog: . Strings is a series of characters (numbers, letters, etc), one example of a string is your name or your id because strings can contain both numbers and letters. Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. Assign variable that coorelates to the function so less errors are made 3 different data types that support different data * integer (numbers) * string (or text/letters) * Boolean (True/False statements) . Questions: . What exactly IS a variable? . A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time . | What is the best data type to represent someone&#39;s dog&#39;s name? . String . | Why is it important to give variables specific names before containing values? . So you don&#39;t get them mixed up . | What is the best way to represent someone&#39;s phone number? . String . Bonus (Not required but important to know): . | How can we update a variable&#39;s value . (blank) = updated version . | What function is used to recieve a user&#39;s input? . Input . | | . Hacks: Assignment Operater: The operator used to assign a new value to a variable, property, event or indexer element. Example: X = 5 Collegeboard uses arrow symbols to assign a value to a variable. A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? The variable would display 22. . x = 22 x = 15 display(x) . 15 . 3.1.2 . Questions: . What is a list? . Lists are sequences of elements with each element being a variable. An example of a list can be the names of the students in this classroom. . | What is an element . A fragment of computer code (can be any piece of computer readable text) . | What is an easy way to reference the elements in a list or string? . | . WorldCup = [&quot;argentina&quot;, &quot;portugal&quot;, &quot;france&quot;, &quot;spain&quot;] print(WorldCup) . [&#39;argentina&#39;, &#39;portugal&#39;, &#39;france&#39;, &#39;spain&#39;] . What is an example of a string? | . print(&quot;Hello Universe&quot;) . Hello Universe . Hacks . Create a list with indices | Index a part of the list that you created. | Try to index from the end | . 3.2.1 . Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn&#39;t connected to the abstraction. | . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range(len(numlist)): numlist[i -1] += int(add) print(numlist) . [30, 32, 34] . 3.2.2 . Hacks . On a single markdown file: . Insert a screenshot of your score on the python quiz . . | Insert a screenshot of your simplifying of the food list . | . | . Food = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwich&quot;] display(Food) . [&#39;pizza&#39;, &#39;hot dog&#39;, &#39;sushi&#39;, &#39;strawberry&#39;, &#39;sandwich&#39;] . Why are using lists better for a program, rather than writing out each line of code? . It&#39;s more efficent because rather than imputing data one by one you can do it way faster using lists. . | Make your own list the &quot;long and slow way&quot; then manage the complexity of the list . | . country1 = &quot;Iran&quot; country2 = &quot;Switzerland&quot; country3 = &quot;Japan&quot; country4 = &quot;Ghana&quot; # Inputing values one by one print(country1, country2, country3, country4) . Iran Switzerland Japan Ghana . countries = [&quot;Iran&quot;, &quot;Switzerland&quot;, &quot;Japan&quot;, &quot;Ghana&quot;, ] # Using a list to put values into the countries variable. display(countries) . [&#39;Iran&#39;, &#39;Switzerland&#39;, &#39;Japan&#39;, &#39;Ghana&#39;] .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/2022/11/28/3.1-3.1-group-lesson.html",
            "relUrl": "/collegeboard/2022/11/28/3.1-3.1-group-lesson.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Javascript Kernel Test",
            "content": "print(&quot;Hello World Javascript Edition&quot;) print(&quot;If you see this, my Javascript kernel is working&quot;) .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/javascript/2022/11/18/javascript-test.html",
            "relUrl": "/javascript/2022/11/18/javascript-test.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Bash Kernel Test",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/bash/2022/11/18/bash-test.html",
            "relUrl": "/bash/2022/11/18/bash-test.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Final Test Corrections",
            "content": "Test Correction Question #27 . Correction: The variables string and Boolean are appropiate for this situation however the names s and a have no meaning and will prove to make the code segment harder to read. . Test Correction Question #28 . Correction: Customers who use more than 25 unites of electricity are incorrectly charged by the code. These customers are charged only for the number of units above 25. For example, say a customer were to use 32 units of electricity, they should be charged a total of $174, $5 for the first 25 and $7 for the additional 7 units. This code segment would incorrectly charge the customer $49 for the 32 units. . Test Correction Question #35 . Correction: This code segment assigns maxPS the value 50 when time &gt; 120 and assigns maxPS the value 30 otherwise. . Test Correction Question #36 . Correction: My answer would have been correct solution if i were initialized to 0 instead of 1. This code segment will generate the list [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]. . Test Correction Question #37 . Correction: This code segment assigns both variables the original value of num1. . Test Correction Question #40 . Correction: My error was not knowing that something will be displayed no matter what the values of x and y are. . Test Correction Question #42 . Correction: The code segment assigns the value 4 to num3 and assigns the value 8 to num1 after initially assigning values to the variables. The value of sum at the end of the code segment is 8 + 4 + 4, or 16. . Test Correction Question #43 . Correction: I was inccorect because 6 is the value of x after the code segment is executed, not the value of result. . Test Correction Question #49 . Correction: I was incorrect because this code segment produces the string &quot;onno&quot;. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/2022/11/09/trimester-1-final-test-corrections.html",
            "relUrl": "/collegeboard/2022/11/09/trimester-1-final-test-corrections.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Night Of The Museum",
            "content": "My Experiences . Overall my time spent during night at the museum was productive because I got to see what other groups presented for their finals. A lot of them were creative and unique which gave me a different perspective on our own project. I also asked people, specifically DevOps people, questions about what they did differently to help their project. I also socialzed with some of my friends from the other computer science teacher&#39;s class. Overall it was a great experience and I was suprised to see so many parents and guests in the room walking around looking at our work also. . . As for my own group, I felt I fulfilled my role to the best of my ability. I got everything done that the DevOps needed to do. Next trimester would be better if I was more interactive on our project and constantly committing important changes. The hardest concept for me to learn was deployment but with the help of visuals I understood and learned more about it. . I am excited for next trimester in Mr. Mortenson&#39;s class as I hope to learn as much as possible and use that knowledge to help me in the future. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/notm/2022/11/09/night-of-the-museum.html",
            "relUrl": "/notm/2022/11/09/night-of-the-museum.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Plan for Next Trimester",
            "content": "Next trimester I have big goals for myself, as of now, I dropship, run a clothing brand and trade stocks. These three side hustles have helped me and my friend make over 10 thousand dollars in profit! However this class has gave me the idea for something that could help me make a lot of money. . Recently, I grew quite fond of indicators and was looking at the code behind some of them. Hopefully within the next few months I will be able to code my own indicator for tradingview and provide paid access for people that want to use it. I will most likely code it using PineScript which is built in on tradingview. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/notm/2022/11/09/next-trimester-plan.html",
            "relUrl": "/notm/2022/11/09/next-trimester-plan.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Script for final presentation",
            "content": "My role as the DevOps is to reveal my website to the internet, this process is known as deployment. I work in AWS, a platform used to host the backend. Whenever my group makes changes to our project my job is to make sure it&#39;s up to date. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/devops/2022/11/02/devops-script.html",
            "relUrl": "/python/devops/2022/11/02/devops-script.html",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Problems and Solutions",
            "content": "Problem 1: Over these past few weeks I spent most of my time doing DevOps work, I didn’t really understand much at first and as time went on I only learned a tiny bit. . Solution 1: However yesterday, One of my friends helped me understand commands and specific concepts better. After that, I was able to finally deploy my website, I technically had it deployed before but it was just the wrong repository. . As of now, we are working on our API for the project. Specifically we are generating a new API and adding it into vscode. Our idea was to make an API that asks people for their reviews on our products (shirts, shorts, crewnecks, etc).op .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/10/28/problems-solutions.html",
            "relUrl": "/markdown/2022/10/28/problems-solutions.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Visuals for DevOps role video",
            "content": ". . . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/devops/2022/10/24/dev-ops-visuals.html",
            "relUrl": "/python/devops/2022/10/24/dev-ops-visuals.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Dev Ops Video Script",
            "content": "My name is yasha and I am the Dev Ops manager on my team. At first I had a lot of trouble learning and understanding the role as I made many mistakes. The hardest task for me to complete was deployment, I had trouble adding my repository to the correct directory. I also had trouble understanding the concepts of Nginx and how sites-available and sites-enabled were linked. However after asking around for help and reading tutorials I was better able to understand how nginx files work off of each other. Both files are linked to each other meaning whenever a change is made to sites-enabled, it will update to sites-available. This is efficent because it doesn’t require you to update both files. . Once I understood these conecpts I learned about deployment as a whole. The running application runs the code in the project directory and is held in the docker container. What helped me understand deployment better was thinking of it as a box. Docker is the box that contains your running application and Nginx is the window on the box that reveals it to the internet. . Another aspect of Dev Ops is understanding your tools. Github is a file-hosting cloud that allows teams to work on the same project. Docker lets you run the application, your application is your website. An IDE otherwise known as an interactive developer environment is a code editor, in our case, vscode. . To summarize, I think that Dev Ops is one of the hardest roles to master and at first I didn’t think I was the correct person for it however as time went on I realized that Dev Ops is an opportunity for me to acquire learning skills from different concepts. I still would like to learn more about Nginx and IDE’s. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/dev%20ops/2022/10/21/dev-ops-script.html",
            "relUrl": "/markdown/dev%20ops/2022/10/21/dev-ops-script.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Jokes Api",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2022/10/19/jokes-API.html",
            "relUrl": "/2022/10/19/jokes-API.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "22 Error Testing",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2022/10/14/22-error-testing.html",
            "relUrl": "/2022/10/14/22-error-testing.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) # organizing coins # Symbol, Name, and price . BTC Bitcoin 19203.20912786924 ETH Ethereum 1302.535600928555 USDT Tether USD 1.000094285368392 USDC USDC 1.000477661148097 BNB Binance Coin 270.00105525107205 XRP XRP 0.4897314042127202 BUSD Binance USD 1.0003009213568992 ADA Cardano 0.3660624589069799 SOL Solana 30.254407183042204 DOGE Dogecoin 0.058748961413204105 DOT Polkadot 6.069472359767447 MATIC Polygon 0.7868259700408456 DAI Dai 1.00045950757267 SHIB Shiba Inu 0.000010120129500166 TRX TRON 0.06362493936708112 STETH Lido Staked Ether 1293.6357849687838 WETH Wrapped Ether 1301.545746759449 UNI Uniswap 6.269707849441305 WBTC Wrapped BTC 19196.44969734286 AVAX Avalanche 15.754553577525822 OKB OKB 16.869579869774455 CAKE PancakeSwap 4.40893962367892 ATOM Cosmos 11.68714343028012 LTC Litecoin 51.39089480432234 FTT FTX Token 23.497306556423972 ETC Ethereum Classic 23.42441136851592 XMR Monero 141.11608602181957 XLM Stellar 0.11285616690108048 ALGO Algorand 0.3167857570029688 BTCB Bitcoin BEP2 19212.187914427504 CRO Cronos 0.10323077808698662 BCH Bitcoin Cash 107.85469374357216 ENS EnergySwap 19.353983535613075 NEAR NEAR Protocol 2.998530943311797 LUNC Terra Classic 0.000274653305505199 WEMIX WEMIX TOKEN 1.7872039849010353 QNT Quant 167.15447160866495 HT Huobi Token 7.82935155981905 FLOW Flow 1.4794075714098018 VET VeChain 0.022835859415336612 FIL Filecoin 5.0477849904337075 HBAR Hedera 0.061313944522773646 MANA Decentraland 0.6256132037754569 FRAX Frax 0.9995757664627505 ICP Internet Computer (DFINITY) 4.935016045950497 EGLD Elrond 53.78654374759491 IMX Immutable X 0.6308515794637338 XTZ Tezos 1.3670560843838389 SAND The Sandbox 0.7549307110020637 CHZ Chiliz 0.18089587388302542 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . Request Digital Coin . RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ . Begin Rapid API Code . import requests . url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } . response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) . End Rapid API Code . json = response.json() # convert response to python json object . Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form . - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions . - To read the result, Data Scientist of Developer converts JSON into human readable form . - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . for coin in json[&quot;data&quot;][&quot;coins&quot;]: print (f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) . organizing coins . Symbol, Name, and price . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "AP Test Corrections",
            "content": "Improvements &amp; Study Material . Understanding the concept of Parameters is difficult for me so I could study them better. Code that multiplies is also a concept that I would like to study and learn more. I was confused on the topic of Nested Loops. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/python/2022/10/10/AP-test-questions.html",
            "relUrl": "/python/2022/10/10/AP-test-questions.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json[]) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;703210b827msh18ebf505c5fabaep1efeabjsn249dcd49ab14&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1496,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29448,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;983286029357&#34;,&#34;total24hVolume&#34;:&#34;62130747822&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384191184818&#34;,&#34;price&#34;:&#34;20039.854500546586&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.00&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20051.438940241358&#34;,&#34;20112.942136659854&#34;,&#34;20157.819968805998&#34;,&#34;20254.029991435713&#34;,&#34;20303.466331336567&#34;,&#34;20352.46379557382&#34;,&#34;20340.736960702463&#34;,&#34;20383.68761580728&#34;,&#34;20327.56610010769&#34;,&#34;20249.0598171069&#34;,&#34;20216.33733971908&#34;,&#34;20180.506474095324&#34;,&#34;20159.110575592727&#34;,&#34;20134.92190087771&#34;,&#34;20157.64358637768&#34;,&#34;20231.83287602472&#34;,&#34;20177.524728080465&#34;,&#34;20081.062490908993&#34;,&#34;20034.134493627964&#34;,&#34;20056.387678604326&#34;,&#34;20062.33767502718&#34;,&#34;20102.601333616225&#34;,&#34;20062.92043596876&#34;,&#34;20037.88842379937&#34;,&#34;20042.0240783645&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;38155001311&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166753001525&#34;,&#34;price&#34;:&#34;1363.2862386654604&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.08&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.1166752669458&#34;,&#34;1351.4752396724552&#34;,&#34;1352.7565855474788&#34;,&#34;1364.7069535474543&#34;,&#34;1375.2332279379189&#34;,&#34;1375.0120085043593&#34;,&#34;1372.8560956800545&#34;,&#34;1376.1109732749908&#34;,&#34;1374.2091487475132&#34;,&#34;1367.8770624662602&#34;,&#34;1366.413446523702&#34;,&#34;1362.3283465053476&#34;,&#34;1360.2889128350394&#34;,&#34;1358.4058794835446&#34;,&#34;1360.971024625842&#34;,&#34;1370.08061964796&#34;,&#34;1367.8080450053967&#34;,&#34;1363.1362582897543&#34;,&#34;1364.1095458044765&#34;,&#34;1363.798675385996&#34;,&#34;1363.631276432834&#34;,&#34;1363.8383885694095&#34;,&#34;1360.9458284500292&#34;,&#34;1359.2096422918778&#34;,&#34;1360.9920678507171&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;12211408705&#34;,&#34;btcPrice&#34;:&#34;0.06802874934188154&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68240554141&#34;,&#34;price&#34;:&#34;1.0004101838338622&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0004730164696796&#34;,&#34;0.9996925245670222&#34;,&#34;1.0003305556540378&#34;,&#34;0.9991437132975184&#34;,&#34;0.9997206896584828&#34;,&#34;1.0003229307902617&#34;,&#34;1.0002174675069595&#34;,&#34;0.999925766541416&#34;,&#34;1.000708618241012&#34;,&#34;1.0010737689896891&#34;,&#34;1.0002632048681543&#34;,&#34;1.0009610459933431&#34;,&#34;1.0002976934190984&#34;,&#34;1.000454394711972&#34;,&#34;0.9999051558590528&#34;,&#34;0.9994295746356769&#34;,&#34;1.0013423068981988&#34;,&#34;1.0018353783090301&#34;,&#34;0.9994152501955391&#34;,&#34;1.0004625909040463&#34;,&#34;0.9999277510688191&#34;,&#34;1.0000250969576618&#34;,&#34;1.0007856949488618&#34;,&#34;1.0002734024299755&#34;,&#34;1.0000861385454851&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40226874368&#34;,&#34;btcPrice&#34;:&#34;0.000049921030305214&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46271445701&#34;,&#34;price&#34;:&#34;1.0002852025758195&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0003790781178878&#34;,&#34;0.9997290863175305&#34;,&#34;1.0003038765412497&#34;,&#34;0.9991408722230394&#34;,&#34;0.9997209463954263&#34;,&#34;1.0001156279108188&#34;,&#34;1.0002132589197983&#34;,&#34;0.999979672700525&#34;,&#34;1.0007058659518255&#34;,&#34;1.0009680461396826&#34;,&#34;1.0002125205262982&#34;,&#34;1.0008177555056958&#34;,&#34;1.000215586806383&#34;,&#34;1.0005180826321018&#34;,&#34;0.9999336999249582&#34;,&#34;0.9994290728265802&#34;,&#34;1.001276747170873&#34;,&#34;1.0017305255841273&#34;,&#34;0.9995250487882986&#34;,&#34;1.0004327041522338&#34;,&#34;1.0000346997048333&#34;,&#34;0.9999849859295973&#34;,&#34;1.0007009863702179&#34;,&#34;1.0002434560917697&#34;,&#34;1.0000777737676467&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3415108297&#34;,&#34;btcPrice&#34;:&#34;0.00004991479367021&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41742606393&#34;,&#34;price&#34;:&#34;288.12689299638276&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.73&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0339632140167&#34;,&#34;293.22632610181876&#34;,&#34;293.9558805163323&#34;,&#34;295.03284994285843&#34;,&#34;297.1816835216467&#34;,&#34;296.57165154567053&#34;,&#34;296.508723433339&#34;,&#34;296.27500319415884&#34;,&#34;295.95929231412583&#34;,&#34;295.2368476142224&#34;,&#34;294.87128482644766&#34;,&#34;294.9890632073065&#34;,&#34;294.53535412890847&#34;,&#34;294.27414059114204&#34;,&#34;294.2693258362167&#34;,&#34;294.8737143821679&#34;,&#34;294.2088468832473&#34;,&#34;293.9289085279649&#34;,&#34;293.69304197097887&#34;,&#34;293.9618989492412&#34;,&#34;293.7066994813715&#34;,&#34;293.40677313758624&#34;,&#34;293.2186341808331&#34;,&#34;293.09767105211586&#34;,&#34;289.6911749595674&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;871740812&#34;,&#34;btcPrice&#34;:&#34;0.014377693859430173&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24942084236&#34;,&#34;price&#34;:&#34;0.5002566536278147&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.13&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4936121327589804&#34;,&#34;0.49360848838582033&#34;,&#34;0.49055029363897007&#34;,&#34;0.49224624716168&#34;,&#34;0.49591130268111816&#34;,&#34;0.4951932790046478&#34;,&#34;0.49595231887605623&#34;,&#34;0.5006001796445517&#34;,&#34;0.5025322706608095&#34;,&#34;0.4988268286009171&#34;,&#34;0.49511942477701776&#34;,&#34;0.4937426468789185&#34;,&#34;0.49392075842330213&#34;,&#34;0.49529929614562507&#34;,&#34;0.49666602419481015&#34;,&#34;0.4986641332159618&#34;,&#34;0.49806377862398726&#34;,&#34;0.49558396360417767&#34;,&#34;0.4957764220208092&#34;,&#34;0.4954403967836592&#34;,&#34;0.4971992585220218&#34;,&#34;0.49696911564537327&#34;,&#34;0.49656652090853365&#34;,&#34;0.4963921027096113&#34;,&#34;0.5004555905476983&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;2016904914&#34;,&#34;btcPrice&#34;:&#34;0.000024963088110953&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21388993239&#34;,&#34;price&#34;:&#34;1.0003438677145713&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.15&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.000400357879546&#34;,&#34;0.9997126067360349&#34;,&#34;1.0002864262312419&#34;,&#34;0.9990306013607333&#34;,&#34;0.9996281277025894&#34;,&#34;1.0001801913869788&#34;,&#34;1.000112080834013&#34;,&#34;0.9998221448047259&#34;,&#34;1.0006914671738822&#34;,&#34;1.0010002833226768&#34;,&#34;1.0001548975570813&#34;,&#34;1.0008648649990153&#34;,&#34;1.000217576130113&#34;,&#34;1.0003457350897718&#34;,&#34;0.9998352125731438&#34;,&#34;0.9993598514093966&#34;,&#34;1.0012320762499878&#34;,&#34;1.0017355712633162&#34;,&#34;0.9994405253689188&#34;,&#34;1.0004121131800483&#34;,&#34;0.9998238682840561&#34;,&#34;0.9998662771266619&#34;,&#34;1.0007009701908778&#34;,&#34;1.000246004815251&#34;,&#34;1.0000577567264675&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6992680824&#34;,&#34;btcPrice&#34;:&#34;0.000049917721093598&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13371264129&#34;,&#34;price&#34;:&#34;0.4297716572281429&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.42939125650203785&#34;,&#34;0.43033129399842107&#34;,&#34;0.431078111896934&#34;,&#34;0.4318859878379686&#34;,&#34;0.4357131618197005&#34;,&#34;0.43568381169625015&#34;,&#34;0.4346962887724402&#34;,&#34;0.4350131875819571&#34;,&#34;0.43469738319003864&#34;,&#34;0.43326982424487304&#34;,&#34;0.43263774502568014&#34;,&#34;0.43186553130359207&#34;,&#34;0.431263252334568&#34;,&#34;0.43111683005617996&#34;,&#34;0.4302721510566732&#34;,&#34;0.4320819334710277&#34;,&#34;0.4315871359240061&#34;,&#34;0.43020289947754364&#34;,&#34;0.42947852563217026&#34;,&#34;0.4299497834108291&#34;,&#34;0.42976407111236586&#34;,&#34;0.4299300749976332&#34;,&#34;0.4292928488934495&#34;,&#34;0.4288537810462236&#34;,&#34;0.4292925027383972&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;495911029&#34;,&#34;btcPrice&#34;:&#34;0.000021445847184989&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11966942111&#34;,&#34;price&#34;:&#34;33.68866002345648&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.35&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.75977114711794&#34;,&#34;33.875549349957005&#34;,&#34;34.01919374746187&#34;,&#34;34.25583589027168&#34;,&#34;34.33192527709708&#34;,&#34;34.34811446907118&#34;,&#34;34.327771426896376&#34;,&#34;34.39163652190693&#34;,&#34;34.37437113302313&#34;,&#34;34.210536634835925&#34;,&#34;34.010295904098804&#34;,&#34;34.02936173846428&#34;,&#34;34.021656312267595&#34;,&#34;33.98410608259004&#34;,&#34;33.9795976643615&#34;,&#34;34.13790010083734&#34;,&#34;34.02841083781576&#34;,&#34;33.89251492144723&#34;,&#34;33.931082525634466&#34;,&#34;33.89395892616255&#34;,&#34;33.87604093134362&#34;,&#34;33.75070349924242&#34;,&#34;33.71877565269129&#34;,&#34;33.68935808665655&#34;,&#34;33.72769888706939&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;1219289133&#34;,&#34;btcPrice&#34;:&#34;0.001681083064876425&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8494428951&#34;,&#34;price&#34;:&#34;0.06402638136568886&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.69&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06430001652573364&#34;,&#34;0.06437036408966565&#34;,&#34;0.06456880597204392&#34;,&#34;0.06502233408584714&#34;,&#34;0.06503812200415436&#34;,&#34;0.06503998592742274&#34;,&#34;0.06588520090979873&#34;,&#34;0.06601129659338578&#34;,&#34;0.06581176470778156&#34;,&#34;0.06553294673649296&#34;,&#34;0.06533678130300317&#34;,&#34;0.06510454153985605&#34;,&#34;0.0652560491458747&#34;,&#34;0.06506052972316402&#34;,&#34;0.06510842081151733&#34;,&#34;0.06540030324727246&#34;,&#34;0.06517726303881609&#34;,&#34;0.06480327467970981&#34;,&#34;0.06441097383830285&#34;,&#34;0.06427408194136594&#34;,&#34;0.06398680313872072&#34;,&#34;0.06394667133164467&#34;,&#34;0.06387224117079927&#34;,&#34;0.06399058225793666&#34;,&#34;0.0639027676630415&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;436312182&#34;,&#34;btcPrice&#34;:&#34;0.000003194952406663&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7357544988&#34;,&#34;price&#34;:&#34;0.8403176206733535&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8437744357312483&#34;,&#34;0.8509094697048541&#34;,&#34;0.8529940032792178&#34;,&#34;0.8540440777034858&#34;,&#34;0.8516241240942773&#34;,&#34;0.8496744646261335&#34;,&#34;0.8469999329838124&#34;,&#34;0.8481864165795252&#34;,&#34;0.8466077838956056&#34;,&#34;0.84420107235308&#34;,&#34;0.845768857513781&#34;,&#34;0.8473892819252429&#34;,&#34;0.8462819651259675&#34;,&#34;0.8429793643795672&#34;,&#34;0.8407670428178173&#34;,&#34;0.8420135800610185&#34;,&#34;0.8396289208490684&#34;,&#34;0.8390404745692586&#34;,&#34;0.8436660275627255&#34;,&#34;0.8429031749192385&#34;,&#34;0.8446341761886833&#34;,&#34;0.8443896855731904&#34;,&#34;0.8419779361544042&#34;,&#34;0.8397174244018213&#34;,&#34;0.8394101853515191&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;372500322&#34;,&#34;btcPrice&#34;:&#34;0.000041932321447266&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7317829106&#34;,&#34;price&#34;:&#34;6.360981538324465&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.78&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.39825823489953&#34;,&#34;6.409513679699773&#34;,&#34;6.429741803717237&#34;,&#34;6.456004351045777&#34;,&#34;6.48959781266168&#34;,&#34;6.502842344430388&#34;,&#34;6.494975652303574&#34;,&#34;6.498153272584972&#34;,&#34;6.477193762524708&#34;,&#34;6.4749696116534&#34;,&#34;6.446783196251528&#34;,&#34;6.4455937056715245&#34;,&#34;6.444181818657368&#34;,&#34;6.435492986540233&#34;,&#34;6.436547303303142&#34;,&#34;6.466312889575846&#34;,&#34;6.447237675580151&#34;,&#34;6.41666528202818&#34;,&#34;6.391078885651267&#34;,&#34;6.389256492722002&#34;,&#34;6.386113400232002&#34;,&#34;6.391088410611678&#34;,&#34;6.3824361673817265&#34;,&#34;6.38711565741988&#34;,&#34;6.370639494661183&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;339313908&#34;,&#34;btcPrice&#34;:&#34;0.000317416553006958&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6651371756&#34;,&#34;price&#34;:&#34;0.000011281998777579&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.81&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011388926295804&#34;,&#34;0.000011400691835227&#34;,&#34;0.000011433362145591&#34;,&#34;0.000011491345676996&#34;,&#34;0.000011523072429884&#34;,&#34;0.000011526229724601&#34;,&#34;0.000011561968127599&#34;,&#34;0.000011585318815413&#34;,&#34;0.000011497977586636&#34;,&#34;0.000011468707147471&#34;,&#34;0.000011434052857603&#34;,&#34;0.000011440212842081&#34;,&#34;0.000011463249880005&#34;,&#34;0.000011478357121817&#34;,&#34;0.000011468846589264&#34;,&#34;0.000011471460823979&#34;,&#34;0.000011419041373176&#34;,&#34;0.000011362068240029&#34;,&#34;0.000011356567844287&#34;,&#34;0.000011325850427243&#34;,&#34;0.000011281429685408&#34;,&#34;0.000011278520019523&#34;,&#34;0.000011289443476598&#34;,&#34;0.000011275707218214&#34;,&#34;0.000011274685827114&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;250238242&#34;,&#34;btcPrice&#34;:&#34;5.62978078e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330461694&#34;,&#34;price&#34;:&#34;0.9999703979870325&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.0001442146345538&#34;,&#34;0.9995536933387662&#34;,&#34;0.9998892692241316&#34;,&#34;0.9989521525504824&#34;,&#34;0.9994530889305914&#34;,&#34;0.9997283495960755&#34;,&#34;0.9998553697654398&#34;,&#34;0.9995096259449162&#34;,&#34;1.00014999944705&#34;,&#34;1.000547118017383&#34;,&#34;1.0000224010848462&#34;,&#34;1.0003710762468978&#34;,&#34;0.9999957229272868&#34;,&#34;1.000138632701965&#34;,&#34;0.9996817467106764&#34;,&#34;0.9991772088092412&#34;,&#34;1.0006436972252386&#34;,&#34;1.0010853680974587&#34;,&#34;0.9996914621025487&#34;,&#34;1.0000324750917602&#34;,&#34;0.9998512870599147&#34;,&#34;0.9996994100302132&#34;,&#34;1.000348706734659&#34;,&#34;1.0000541769499978&#34;,&#34;0.9998893704838365&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;112548403&#34;,&#34;btcPrice&#34;:&#34;0.000049899084744341&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5777977546&#34;,&#34;price&#34;:&#34;0.06257536242514035&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.34&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06236865465429385&#34;,&#34;0.06246589991130288&#34;,&#34;0.06240843270681821&#34;,&#34;0.062249161574027316&#34;,&#34;0.06223099830897218&#34;,&#34;0.06264617941013605&#34;,&#34;0.06281452510294&#34;,&#34;0.06276275207762542&#34;,&#34;0.06268343841288901&#34;,&#34;0.06255691626086467&#34;,&#34;0.0624515709368335&#34;,&#34;0.062476261129714605&#34;,&#34;0.06256795462973794&#34;,&#34;0.06271174027019062&#34;,&#34;0.06268666754055147&#34;,&#34;0.06270030290942635&#34;,&#34;0.06269244944530315&#34;,&#34;0.06262885962844993&#34;,&#34;0.06254936036363117&#34;,&#34;0.06261284522092157&#34;,&#34;0.06264389726991014&#34;,&#34;0.06264798332735108&#34;,&#34;0.0625831711964946&#34;,&#34;0.06255397422463647&#34;,&#34;0.06256088048418898&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;476393303&#34;,&#34;btcPrice&#34;:&#34;0.0000031225457462&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5505713194&#34;,&#34;price&#34;:&#34;1363.2031078710097&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.97&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.13607829603&#34;,&#34;1351.4689477854226&#34;,&#34;1354.685548232379&#34;,&#34;1361.146588456366&#34;,&#34;1373.1112591782544&#34;,&#34;1375.4567308292258&#34;,&#34;1373.5021921077062&#34;,&#34;1374.5798088672896&#34;,&#34;1374.2047922199295&#34;,&#34;1370.3789875745763&#34;,&#34;1366.6984725193515&#34;,&#34;1364.1249946067635&#34;,&#34;1361.8843726971165&#34;,&#34;1360.6976138430425&#34;,&#34;1360.9309038296853&#34;,&#34;1368.6885054347988&#34;,&#34;1370.5874450713914&#34;,&#34;1365.461962666511&#34;,&#34;1364.4735182510437&#34;,&#34;1365.7899220819745&#34;,&#34;1362.8480784629835&#34;,&#34;1363.3474812485113&#34;,&#34;1360.955305440429&#34;,&#34;1357.8891999472016&#34;,&#34;1360.0744275952018&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;199194192&#34;,&#34;btcPrice&#34;:&#34;0.06801193339811255&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5412481870&#34;,&#34;price&#34;:&#34;6.969930495798301&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.08&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.7736642117361905&#34;,&#34;6.756076217414185&#34;,&#34;6.793449625987095&#34;,&#34;6.865859893412923&#34;,&#34;6.937483195481218&#34;,&#34;6.979515536920047&#34;,&#34;6.9478029429015224&#34;,&#34;6.9284625247560845&#34;,&#34;6.907914104712911&#34;,&#34;6.874769405900166&#34;,&#34;6.896114575710537&#34;,&#34;6.899743011599772&#34;,&#34;6.860135783871776&#34;,&#34;6.828443224761433&#34;,&#34;6.849180894331325&#34;,&#34;6.905242766177328&#34;,&#34;6.894209064572883&#34;,&#34;6.840607457650447&#34;,&#34;6.8472846441063595&#34;,&#34;6.887338045193232&#34;,&#34;6.895074852688421&#34;,&#34;6.8963663619066375&#34;,&#34;6.898867588802628&#34;,&#34;6.920380453888417&#34;,&#34;6.942104981178551&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;216610086&#34;,&#34;btcPrice&#34;:&#34;0.000347803448154187&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5074012202&#34;,&#34;price&#34;:&#34;17.13641663869069&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.71&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.254732588660875&#34;,&#34;17.31200366632601&#34;,&#34;17.356953304800275&#34;,&#34;17.445230081280297&#34;,&#34;17.540093125466566&#34;,&#34;17.549902978316823&#34;,&#34;17.521869854955458&#34;,&#34;17.57089756434244&#34;,&#34;17.511675802061724&#34;,&#34;17.428511702438602&#34;,&#34;17.401335012223097&#34;,&#34;17.365417972781653&#34;,&#34;17.33472548514147&#34;,&#34;17.32010883574378&#34;,&#34;17.321443260238883&#34;,&#34;17.384425161490732&#34;,&#34;17.365204350676155&#34;,&#34;17.330227378674756&#34;,&#34;17.297832611647273&#34;,&#34;17.269149869433907&#34;,&#34;17.235606352060426&#34;,&#34;17.226380111908966&#34;,&#34;17.183610217148228&#34;,&#34;17.154228049831918&#34;,&#34;17.14073387012898&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;194027380&#34;,&#34;btcPrice&#34;:&#34;0.00085511681924753&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4906769200&#34;,&#34;price&#34;:&#34;20047.548443013075&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.01&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20051.22405616085&#34;,&#34;20110.602103151356&#34;,&#34;20155.552573913872&#34;,&#34;20251.49133520362&#34;,&#34;20298.639411610195&#34;,&#34;20350.38567650615&#34;,&#34;20339.07972321146&#34;,&#34;20380.795072455694&#34;,&#34;20324.41856067999&#34;,&#34;20246.294276116678&#34;,&#34;20211.982370889044&#34;,&#34;20178.180919686867&#34;,&#34;20155.929604942034&#34;,&#34;20129.439096326205&#34;,&#34;20156.562287027326&#34;,&#34;20228.537582610592&#34;,&#34;20179.511202594982&#34;,&#34;20084.306927875485&#34;,&#34;20035.856862900007&#34;,&#34;20058.999071960046&#34;,&#34;20064.62454650722&#34;,&#34;20106.044277327273&#34;,&#34;20064.093791351774&#34;,&#34;20037.47288718635&#34;,&#34;20041.108561591907&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;57129733&#34;,&#34;btcPrice&#34;:&#34;1.000383932052315&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4073324125&#34;,&#34;price&#34;:&#34;13.084621617698701&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.79&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.874689417804111&#34;,&#34;12.977240987750184&#34;,&#34;12.999694810987828&#34;,&#34;13.05809448077896&#34;,&#34;13.134456340172274&#34;,&#34;13.166373400713976&#34;,&#34;13.174046618107784&#34;,&#34;13.156595139367123&#34;,&#34;13.136832518684233&#34;,&#34;13.059151743839621&#34;,&#34;13.024245747988846&#34;,&#34;13.009744454798474&#34;,&#34;13.00236212430498&#34;,&#34;12.99445359709676&#34;,&#34;12.964318799206644&#34;,&#34;13.07464583651195&#34;,&#34;13.11135570380746&#34;,&#34;13.089177553297818&#34;,&#34;13.154363371335887&#34;,&#34;13.339019272614035&#34;,&#34;13.38059705032621&#34;,&#34;13.329070205628852&#34;,&#34;13.167955047810006&#34;,&#34;13.134075321985312&#34;,&#34;13.114541673330065&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;353965112&#34;,&#34;btcPrice&#34;:&#34;0.000652929970990649&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3937336916&#34;,&#34;price&#34;:&#34;15.647475615435894&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.61&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.560986349984056&#34;,&#34;15.561097044869294&#34;,&#34;15.520784658634735&#34;,&#34;15.569346159010081&#34;,&#34;15.638549620210085&#34;,&#34;15.735124066059186&#34;,&#34;15.725775504001712&#34;,&#34;15.757115892473582&#34;,&#34;15.718908551335334&#34;,&#34;15.673810075767081&#34;,&#34;15.65842199459123&#34;,&#34;15.650604457573523&#34;,&#34;15.639913677498697&#34;,&#34;15.635944674900246&#34;,&#34;15.635934011171274&#34;,&#34;15.780030015908347&#34;,&#34;15.770980376150868&#34;,&#34;15.718037406084202&#34;,&#34;15.73374390923561&#34;,&#34;15.698092217209963&#34;,&#34;15.645888388583133&#34;,&#34;15.662334941562188&#34;,&#34;15.657692862530935&#34;,&#34;15.658427678670678&#34;,&#34;15.651430723013112&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;20334965&#34;,&#34;btcPrice&#34;:&#34;0.000780817825549038&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3814884067&#34;,&#34;price&#34;:&#34;53.83288610922342&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.99&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.290318948555985&#34;,&#34;54.34626044318356&#34;,&#34;54.51609336019526&#34;,&#34;54.71164008880007&#34;,&#34;54.84017873250239&#34;,&#34;54.85783258935826&#34;,&#34;54.84912409601398&#34;,&#34;54.79423800415394&#34;,&#34;54.77093043110981&#34;,&#34;54.48254700568355&#34;,&#34;54.35863553823271&#34;,&#34;54.35076863809225&#34;,&#34;54.43299144548598&#34;,&#34;54.449331741568095&#34;,&#34;54.488412361727285&#34;,&#34;54.59373560051482&#34;,&#34;54.57222140808168&#34;,&#34;54.40248925303921&#34;,&#34;54.262001807882896&#34;,&#34;54.387401501472056&#34;,&#34;54.22668757016522&#34;,&#34;54.28815807212204&#34;,&#34;54.12985595999811&#34;,&#34;54.040357931421696&#34;,&#34;53.819644242365854&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;497654367&#34;,&#34;btcPrice&#34;:&#34;0.002686291265625463&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3290400146&#34;,&#34;price&#34;:&#34;24.649343108539792&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.17&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.68367396586351&#34;,&#34;24.727036895780905&#34;,&#34;24.763295856196095&#34;,&#34;24.910218336026045&#34;,&#34;25.00389208839861&#34;,&#34;25.02149477638343&#34;,&#34;25.038245964336557&#34;,&#34;25.10263308087383&#34;,&#34;25.055084523451587&#34;,&#34;24.953428269092957&#34;,&#34;24.910919655194686&#34;,&#34;24.872098392385602&#34;,&#34;24.84677526683583&#34;,&#34;24.829253587428784&#34;,&#34;24.85251767680278&#34;,&#34;24.97486287058912&#34;,&#34;24.903255647556698&#34;,&#34;24.786341676773137&#34;,&#34;24.757136569969543&#34;,&#34;24.77671361589168&#34;,&#34;24.775220953410248&#34;,&#34;24.77964437393726&#34;,&#34;24.72653513513892&#34;,&#34;24.691788500146682&#34;,&#34;24.66401645750347&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;73030150&#34;,&#34;btcPrice&#34;:&#34;0.001230016071617061&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3273114521&#34;,&#34;price&#34;:&#34;28.140501120150788&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.94&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.570158653943103&#34;,&#34;27.588406181551&#34;,&#34;27.632000320786197&#34;,&#34;27.72407252402464&#34;,&#34;28.315134280524177&#34;,&#34;28.701663622553088&#34;,&#34;28.455510043787736&#34;,&#34;28.462425971003423&#34;,&#34;28.431530396764664&#34;,&#34;28.27063736534509&#34;,&#34;28.144183615836692&#34;,&#34;28.161764285728264&#34;,&#34;28.24699314130158&#34;,&#34;28.321875873800117&#34;,&#34;28.291281307917103&#34;,&#34;28.34170165566859&#34;,&#34;28.256604100945246&#34;,&#34;28.12194374001258&#34;,&#34;28.04349870994536&#34;,&#34;28.015776679784064&#34;,&#34;27.993885151967067&#34;,&#34;27.991073535808457&#34;,&#34;27.977179429599857&#34;,&#34;27.972384153914437&#34;,&#34;28.02967430353566&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;640206335&#34;,&#34;btcPrice&#34;:&#34;0.001404226818083098&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2707918735&#34;,&#34;price&#34;:&#34;148.92158922939615&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.86&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.0468911817187&#34;,&#34;146.24477782260104&#34;,&#34;146.1611566569247&#34;,&#34;146.98453497183345&#34;,&#34;147.5235053627857&#34;,&#34;147.81325448931747&#34;,&#34;148.28163857932623&#34;,&#34;149.09225665366174&#34;,&#34;147.89654979841282&#34;,&#34;145.94227441308016&#34;,&#34;145.47852845356343&#34;,&#34;145.43866042477168&#34;,&#34;145.09498381145283&#34;,&#34;145.00142611903777&#34;,&#34;145.08759558818358&#34;,&#34;145.5453373285789&#34;,&#34;144.85329513444134&#34;,&#34;144.49414383580302&#34;,&#34;144.05426723836575&#34;,&#34;144.03338234964409&#34;,&#34;143.95047428899073&#34;,&#34;144.06793141358014&#34;,&#34;144.9336130415516&#34;,&#34;146.03304503760864&#34;,&#34;146.64562578496188&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;133128018&#34;,&#34;btcPrice&#34;:&#34;0.007431270981799509&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2467034807&#34;,&#34;price&#34;:&#34;0.351673798601542&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.03&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3515342629988674&#34;,&#34;0.3521676081477334&#34;,&#34;0.35309919565030656&#34;,&#34;0.3541903724348078&#34;,&#34;0.3566526799226524&#34;,&#34;0.3568785361406288&#34;,&#34;0.356277927477052&#34;,&#34;0.35771179232442063&#34;,&#34;0.3576900736402804&#34;,&#34;0.35714880263121757&#34;,&#34;0.3558025051327707&#34;,&#34;0.35486724067376885&#34;,&#34;0.3544853650160468&#34;,&#34;0.3542064044813385&#34;,&#34;0.3546713478004645&#34;,&#34;0.3561494534958878&#34;,&#34;0.3545625893380675&#34;,&#34;0.35282669082243273&#34;,&#34;0.3527681768918396&#34;,&#34;0.35326837959402335&#34;,&#34;0.3529278529125966&#34;,&#34;0.3518398677577421&#34;,&#34;0.3511555905614255&#34;,&#34;0.35041871451434975&#34;,&#34;0.3509473897239541&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;136966633&#34;,&#34;btcPrice&#34;:&#34;0.000017548720156224&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2438288035&#34;,&#34;price&#34;:&#34;0.12067433082489741&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.39&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11886242818438897&#34;,&#34;0.11904460107249429&#34;,&#34;0.11897292310970312&#34;,&#34;0.11903996874083529&#34;,&#34;0.11937706226353863&#34;,&#34;0.11928353420436945&#34;,&#34;0.1193565730892674&#34;,&#34;0.11973240195034526&#34;,&#34;0.11981307931058192&#34;,&#34;0.11920048145769879&#34;,&#34;0.11897308489799317&#34;,&#34;0.11909057039936508&#34;,&#34;0.11882782289002976&#34;,&#34;0.11865911600653936&#34;,&#34;0.11887162326050421&#34;,&#34;0.1197869137342681&#34;,&#34;0.11950079292447616&#34;,&#34;0.11928192026253723&#34;,&#34;0.11961526003702445&#34;,&#34;0.11942045477321465&#34;,&#34;0.1201747085476815&#34;,&#34;0.12021463550029339&#34;,&#34;0.12017073726753241&#34;,&#34;0.12013352811417688&#34;,&#34;0.12028025924273718&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;205897153&#34;,&#34;btcPrice&#34;:&#34;0.00000602171691524&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2277494308&#34;,&#34;price&#34;:&#34;119.04483309875322&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.73&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.31973609743602&#34;,&#34;122.22980221659442&#34;,&#34;122.20905014823225&#34;,&#34;122.74951121547188&#34;,&#34;123.19407940957747&#34;,&#34;122.98427770012786&#34;,&#34;122.7489561074102&#34;,&#34;122.622367281349&#34;,&#34;122.2248259758892&#34;,&#34;121.53652687792291&#34;,&#34;121.05542080331115&#34;,&#34;121.09570305656003&#34;,&#34;121.35752961593165&#34;,&#34;121.36902633977782&#34;,&#34;121.44672955438497&#34;,&#34;121.88205553929767&#34;,&#34;121.74220497866185&#34;,&#34;121.27301183132361&#34;,&#34;120.83463832548642&#34;,&#34;120.93641071768519&#34;,&#34;120.8315292745319&#34;,&#34;120.63797684775939&#34;,&#34;120.29930074523377&#34;,&#34;119.25821090604583&#34;,&#34;118.92270187492353&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;191104067&#34;,&#34;btcPrice&#34;:&#34;0.005940404063088695&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2251605091&#34;,&#34;price&#34;:&#34;20014.08957204792&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20050.866782919587&#34;,&#34;20079.593668466954&#34;,&#34;20158.93074005341&#34;,&#34;20211.814480937664&#34;,&#34;20307.580914788625&#34;,&#34;20353.1967711348&#34;,&#34;20335.218938308455&#34;,&#34;20375.58916773032&#34;,&#34;20340.90091666203&#34;,&#34;20284.80368318787&#34;,&#34;20235.020272755173&#34;,&#34;20210.068846560098&#34;,&#34;20157.555056397156&#34;,&#34;20146.5180972688&#34;,&#34;20140.794626465147&#34;,&#34;20202.949742622426&#34;,&#34;20208.651894210692&#34;,&#34;20117.51422062349&#34;,&#34;20009.502650497943&#34;,&#34;20059.31662977737&#34;,&#34;20036.56127068938&#34;,&#34;20104.861221809813&#34;,&#34;20091.709684423215&#34;,&#34;20045.856019510316&#34;,&#34;20049.03126180772&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;24914977&#34;,&#34;btcPrice&#34;:&#34;0.9985283331137936&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2207150533&#34;,&#34;price&#34;:&#34;0.10974334546709036&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.22&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10964137644253408&#34;,&#34;0.11000036549663396&#34;,&#34;0.11025327160010467&#34;,&#34;0.11070373939431584&#34;,&#34;0.11104511865941227&#34;,&#34;0.11109857702436873&#34;,&#34;0.1110924929009018&#34;,&#34;0.11126352122246669&#34;,&#34;0.11094331934275127&#34;,&#34;0.11059613120859749&#34;,&#34;0.11052423450494585&#34;,&#34;0.11035632946250828&#34;,&#34;0.11018785138110065&#34;,&#34;0.11015497144568412&#34;,&#34;0.11030215116960462&#34;,&#34;0.1107740419247218&#34;,&#34;0.1105076809610223&#34;,&#34;0.11029154187446003&#34;,&#34;0.11018273316408501&#34;,&#34;0.11017177693325447&#34;,&#34;0.11029393462225603&#34;,&#34;0.11033990968249555&#34;,&#34;0.11003104029536713&#34;,&#34;0.10974935814949374&#34;,&#34;0.10970607763261775&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;22318097&#34;,&#34;btcPrice&#34;:&#34;0.00000547625460375&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2202604044&#34;,&#34;price&#34;:&#34;3.623631787992507&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.43&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.6761672965431966&#34;,&#34;3.690346882494526&#34;,&#34;3.694321108085478&#34;,&#34;3.7048560012992415&#34;,&#34;3.73751823983082&#34;,&#34;3.728316938499929&#34;,&#34;3.726590894963946&#34;,&#34;3.7324865567596524&#34;,&#34;3.7152125117728954&#34;,&#34;3.684688319254966&#34;,&#34;3.6728907302323908&#34;,&#34;3.6708852928250395&#34;,&#34;3.6833968889039204&#34;,&#34;3.681675727464209&#34;,&#34;3.6735385303585844&#34;,&#34;3.68851735340297&#34;,&#34;3.6772074269701442&#34;,&#34;3.6556508817867934&#34;,&#34;3.6478753216831095&#34;,&#34;3.6532070737188658&#34;,&#34;3.6532539985117367&#34;,&#34;3.655846529561597&#34;,&#34;3.6496531589122956&#34;,&#34;3.641619150851093&#34;,&#34;3.6350448305036016&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;221387588&#34;,&#34;btcPrice&#34;:&#34;0.000180821262344678&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1915986971&#34;,&#34;price&#34;:&#34;0.000290706063495791&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.58&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297478449646947&#34;,&#34;0.000299529084347598&#34;,&#34;0.00030173904471774&#34;,&#34;0.000299746687090643&#34;,&#34;0.000298962325969473&#34;,&#34;0.000302229563415801&#34;,&#34;0.0003030758001857&#34;,&#34;0.000301535490436218&#34;,&#34;0.000300445667829273&#34;,&#34;0.000299094184910521&#34;,&#34;0.000295609729343043&#34;,&#34;0.000294595264457835&#34;,&#34;0.000296162404748322&#34;,&#34;0.000295911048047322&#34;,&#34;0.000296318063575689&#34;,&#34;0.000297253381599039&#34;,&#34;0.000296125095840895&#34;,&#34;0.000294696904499816&#34;,&#34;0.000295907924600568&#34;,&#34;0.00029534892924621&#34;,&#34;0.000294197608224041&#34;,&#34;0.000291797039411577&#34;,&#34;0.000290714602896856&#34;,&#34;0.000292152287203858&#34;,&#34;0.000291804788850734&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;74988724&#34;,&#34;btcPrice&#34;:&#34;1.4506395917e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1808191015&#34;,&#34;price&#34;:&#34;1.8081910150452651&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.99&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8196832340882974&#34;,&#34;1.8253360632832465&#34;,&#34;1.8285082236543482&#34;,&#34;1.8347555694945936&#34;,&#34;1.8381094917557752&#34;,&#34;1.833948476565528&#34;,&#34;1.8341444284523087&#34;,&#34;1.8382997009905768&#34;,&#34;1.8395788091068113&#34;,&#34;1.8309599664678795&#34;,&#34;1.8205198309645931&#34;,&#34;1.8134085608529036&#34;,&#34;1.8119544734225412&#34;,&#34;1.807618265715021&#34;,&#34;1.8075767051605849&#34;,&#34;1.8193091119729712&#34;,&#34;1.8198679437765712&#34;,&#34;1.8137572972729035&#34;,&#34;1.8098615034125096&#34;,&#34;1.8192111410361753&#34;,&#34;1.8152701115769376&#34;,&#34;1.8113797407010894&#34;,&#34;1.809695001570721&#34;,&#34;1.8027164883512778&#34;,&#34;1.8056138298343074&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;11767205&#34;,&#34;btcPrice&#34;:&#34;0.00009022974767586&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1767788667&#34;,&#34;price&#34;:&#34;1.7060303676040545&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.29&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6890181082125528&#34;,&#34;1.6914682243282655&#34;,&#34;1.6953510291771732&#34;,&#34;1.7032242512223692&#34;,&#34;1.7136242682184002&#34;,&#34;1.7136009177534397&#34;,&#34;1.7149865876802517&#34;,&#34;1.7184074490109524&#34;,&#34;1.710995334162153&#34;,&#34;1.7048864523565708&#34;,&#34;1.699721441021863&#34;,&#34;1.7001328102878455&#34;,&#34;1.6965434775015982&#34;,&#34;1.6926828494491937&#34;,&#34;1.692977321870199&#34;,&#34;1.7017665013498764&#34;,&#34;1.6974412388606024&#34;,&#34;1.6883688699999264&#34;,&#34;1.6875445311679127&#34;,&#34;1.7026917327614273&#34;,&#34;1.702097981878996&#34;,&#34;1.706486937299897&#34;,&#34;1.7027386214094398&#34;,&#34;1.699999180886439&#34;,&#34;1.7047711097527554&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;138645103&#34;,&#34;btcPrice&#34;:&#34;0.000085131873964331&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1725716377&#34;,&#34;price&#34;:&#34;17.257163771405427&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.80&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.076100017021975&#34;,&#34;17.06662658749615&#34;,&#34;17.23481897642682&#34;,&#34;17.392304714899172&#34;,&#34;17.34806076924321&#34;,&#34;17.37896364967073&#34;,&#34;17.3987048654455&#34;,&#34;17.64170122029659&#34;,&#34;17.57215127384117&#34;,&#34;17.43018850760622&#34;,&#34;17.342435916635672&#34;,&#34;17.43421229530948&#34;,&#34;17.326630535156816&#34;,&#34;17.38049581884555&#34;,&#34;17.34490252708747&#34;,&#34;17.416262833529142&#34;,&#34;17.38170991715996&#34;,&#34;17.345059434798504&#34;,&#34;17.452270910242337&#34;,&#34;17.533734935028292&#34;,&#34;17.40508937928887&#34;,&#34;17.33541860238796&#34;,&#34;17.14838370106195&#34;,&#34;17.2545597608494&#34;,&#34;17.267555975917823&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;18740826&#34;,&#34;btcPrice&#34;:&#34;0.000860834790018754&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1631753976&#34;,&#34;price&#34;:&#34;5.551935397465494&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.42&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.56243119343507&#34;,&#34;5.567298776850595&#34;,&#34;5.576308807839807&#34;,&#34;5.601722240721692&#34;,&#34;5.625170729423998&#34;,&#34;5.620904303320557&#34;,&#34;5.636315942124946&#34;,&#34;5.635348964222284&#34;,&#34;5.621159554675177&#34;,&#34;5.60335716785942&#34;,&#34;5.5905571062639625&#34;,&#34;5.591457772922186&#34;,&#34;5.577783355017431&#34;,&#34;5.569307171726996&#34;,&#34;5.5721648533032235&#34;,&#34;5.588903896878948&#34;,&#34;5.583840701410947&#34;,&#34;5.565198217133781&#34;,&#34;5.559443292783233&#34;,&#34;5.562332394567694&#34;,&#34;5.561388614353593&#34;,&#34;5.553622727528361&#34;,&#34;5.542105541337092&#34;,&#34;5.541592730459978&#34;,&#34;5.542813312914228&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;110041642&#34;,&#34;btcPrice&#34;:&#34;0.000277044695973919&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579859986&#34;,&#34;price&#34;:&#34;6.016053153901669&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.12&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.0162195206336015&#34;,&#34;6.027382655786574&#34;,&#34;6.024819723237437&#34;,&#34;6.039340191092633&#34;,&#34;6.06724228192398&#34;,&#34;6.084822176339837&#34;,&#34;6.12213244622854&#34;,&#34;6.122207846967171&#34;,&#34;6.115223803839146&#34;,&#34;6.090144995430115&#34;,&#34;6.059958922242473&#34;,&#34;6.053464254579577&#34;,&#34;6.0451251289440755&#34;,&#34;6.038939121962651&#34;,&#34;6.0323637715058815&#34;,&#34;6.053924377605492&#34;,&#34;6.050910411565236&#34;,&#34;6.037034022086178&#34;,&#34;6.031591648330019&#34;,&#34;6.028034606779118&#34;,&#34;6.034399244728661&#34;,&#34;6.045367358311911&#34;,&#34;6.040906076591592&#34;,&#34;6.047392163677481&#34;,&#34;6.019846445406749&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;50408946&#34;,&#34;btcPrice&#34;:&#34;0.000300204432808511&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1571761839&#34;,&#34;price&#34;:&#34;0.023543205312770182&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.90&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.0237501279975899&#34;,&#34;0.023800623235562788&#34;,&#34;0.02386182467215722&#34;,&#34;0.023973179564354224&#34;,&#34;0.024039808529594694&#34;,&#34;0.024056225110206598&#34;,&#34;0.02401908035553596&#34;,&#34;0.02404102526204194&#34;,&#34;0.02399624253894211&#34;,&#34;0.023865905918825207&#34;,&#34;0.023792587646072907&#34;,&#34;0.02383798931505895&#34;,&#34;0.02381454971986665&#34;,&#34;0.02374267125916623&#34;,&#34;0.023764159130642643&#34;,&#34;0.023889551570007425&#34;,&#34;0.023861043642166995&#34;,&#34;0.023746804930897137&#34;,&#34;0.02370363220930435&#34;,&#34;0.023715067017245118&#34;,&#34;0.023689647696631462&#34;,&#34;0.02366682198719938&#34;,&#34;0.02359283729367599&#34;,&#34;0.02355808594946514&#34;,&#34;0.023547364902136332&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;106208870&#34;,&#34;btcPrice&#34;:&#34;0.000001174819174068&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1552779619&#34;,&#34;price&#34;:&#34;4.668818432714265&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.660082859245468&#34;,&#34;4.665507699491085&#34;,&#34;4.669686398275825&#34;,&#34;4.704354056302064&#34;,&#34;4.729879002222916&#34;,&#34;4.714593691596935&#34;,&#34;4.7230722097715105&#34;,&#34;4.727203946438871&#34;,&#34;4.714055794424472&#34;,&#34;4.703283518317288&#34;,&#34;4.699762821774249&#34;,&#34;4.69964584740277&#34;,&#34;4.69063433754996&#34;,&#34;4.676198352663021&#34;,&#34;4.698892938256321&#34;,&#34;4.723652915707889&#34;,&#34;4.719455323683941&#34;,&#34;4.711049093360597&#34;,&#34;4.724793283381334&#34;,&#34;4.7271290097513665&#34;,&#34;4.7273734867372195&#34;,&#34;4.730379137827014&#34;,&#34;4.7235237454969665&#34;,&#34;4.720485367387854&#34;,&#34;4.6901802237638766&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;57468350&#34;,&#34;btcPrice&#34;:&#34;0.000232976663208155&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1534767558&#34;,&#34;price&#34;:&#34;0.6996887438387233&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.50&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7016494769558138&#34;,&#34;0.7013306881258784&#34;,&#34;0.7024614313806439&#34;,&#34;0.7044272163104102&#34;,&#34;0.706472351768559&#34;,&#34;0.7093918654850726&#34;,&#34;0.7108366867405783&#34;,&#34;0.7107953770862832&#34;,&#34;0.7099623704106002&#34;,&#34;0.7073510016314243&#34;,&#34;0.7053811315549995&#34;,&#34;0.7070934961637594&#34;,&#34;0.7049849983052269&#34;,&#34;0.7044318506572336&#34;,&#34;0.7042526160893104&#34;,&#34;0.7067846665564811&#34;,&#34;0.7055964200659501&#34;,&#34;0.702908853201086&#34;,&#34;0.7014031290162064&#34;,&#34;0.7008240701784926&#34;,&#34;0.7005131590496823&#34;,&#34;0.7005243124438437&#34;,&#34;0.7002418763387208&#34;,&#34;0.7006899718611295&#34;,&#34;0.6999478391840782&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;139891161&#34;,&#34;btcPrice&#34;:&#34;0.000034914861473652&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1528956985&#34;,&#34;price&#34;:&#34;0.7644784926692474&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.93&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7860619259860426&#34;,&#34;0.7859435779761835&#34;,&#34;0.7861918029620322&#34;,&#34;0.7917396985406836&#34;,&#34;0.7933727507309073&#34;,&#34;0.7916402869669651&#34;,&#34;0.7935301886412963&#34;,&#34;0.7934006370508817&#34;,&#34;0.7896677909111062&#34;,&#34;0.786328322377868&#34;,&#34;0.7828512102910562&#34;,&#34;0.7826248077456216&#34;,&#34;0.7813942918727794&#34;,&#34;0.7768731927772912&#34;,&#34;0.774845353554199&#34;,&#34;0.7803342767455519&#34;,&#34;0.77748526325977&#34;,&#34;0.7734088316059472&#34;,&#34;0.7719538362717691&#34;,&#34;0.7713533598793996&#34;,&#34;0.769495822587314&#34;,&#34;0.7670542178675496&#34;,&#34;0.7655229591091727&#34;,&#34;0.7650383354395589&#34;,&#34;0.7645827066979348&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;44793226&#34;,&#34;btcPrice&#34;:&#34;0.000038147906345747&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1412651149&#34;,&#34;price&#34;:&#34;0.05802406951038318&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.55&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05770823380663813&#34;,&#34;0.05774903033415054&#34;,&#34;0.057915572884848006&#34;,&#34;0.05810678934296818&#34;,&#34;0.05824109880306974&#34;,&#34;0.05837365821928798&#34;,&#34;0.058391844857850296&#34;,&#34;0.058420669824922486&#34;,&#34;0.058284382479036986&#34;,&#34;0.05817173526970868&#34;,&#34;0.05807921716077961&#34;,&#34;0.058150643142977756&#34;,&#34;0.05809575095904357&#34;,&#34;0.05804683462479764&#34;,&#34;0.0580893171305297&#34;,&#34;0.05828383075476003&#34;,&#34;0.05829009517872864&#34;,&#34;0.05815108256774528&#34;,&#34;0.0580051333849642&#34;,&#34;0.05801242150604921&#34;,&#34;0.05805091278384359&#34;,&#34;0.058086412112980726&#34;,&#34;0.05802601718087566&#34;,&#34;0.05799056099286723&#34;,&#34;0.05800106767977079&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;45283049&#34;,&#34;btcPrice&#34;:&#34;0.000002895433672375&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1359957068&#34;,&#34;price&#34;:&#34;1.0013927267410865&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.04&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.9998387203956588&#34;,&#34;0.9991795416493741&#34;,&#34;0.9995865702781206&#34;,&#34;0.9984005488287919&#34;,&#34;0.9990889387633427&#34;,&#34;0.9992832524161939&#34;,&#34;0.9995431951063479&#34;,&#34;0.9992818968259785&#34;,&#34;0.9999311001849419&#34;,&#34;1.0002320414176233&#34;,&#34;0.9996418223412398&#34;,&#34;1.0001192349643087&#34;,&#34;0.9994764717300544&#34;,&#34;0.999750237165413&#34;,&#34;0.9992257829070216&#34;,&#34;0.9988855798280094&#34;,&#34;1.0006437036230644&#34;,&#34;1.0009904957198679&#34;,&#34;0.999193245743286&#34;,&#34;0.9998007410985583&#34;,&#34;0.9994672650160044&#34;,&#34;0.999284943092215&#34;,&#34;0.9999859949334076&#34;,&#34;0.9998286437331367&#34;,&#34;1.0012358617187662&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;6767350&#34;,&#34;btcPrice&#34;:&#34;0.000049960754228939&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1350919946&#34;,&#34;price&#34;:&#34;138.16992311843057&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.34&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.7723467133241&#34;,&#34;137.81098287130007&#34;,&#34;138.04298230548113&#34;,&#34;138.87720276266452&#34;,&#34;139.1125352948242&#34;,&#34;139.0565202511056&#34;,&#34;139.15754518214834&#34;,&#34;138.81990972517082&#34;,&#34;137.89167052928534&#34;,&#34;137.45970305588784&#34;,&#34;137.8392892605069&#34;,&#34;139.3612000005179&#34;,&#34;138.96346091827144&#34;,&#34;139.39944189729206&#34;,&#34;139.8843925606133&#34;,&#34;140.69574195419648&#34;,&#34;139.61694354017848&#34;,&#34;139.51555414127344&#34;,&#34;139.28222939653202&#34;,&#34;139.63783946225655&#34;,&#34;139.13542537008928&#34;,&#34;139.1870001137723&#34;,&#34;138.76031274500184&#34;,&#34;138.11612272152271&#34;,&#34;138.1792349583611&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;42126667&#34;,&#34;btcPrice&#34;:&#34;0.006894756801485859&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1317734147&#34;,&#34;price&#34;:&#34;55.77231444889979&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.02&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.447577507868715&#34;,&#34;54.128375568181134&#34;,&#34;54.23440566519872&#34;,&#34;54.73707935361438&#34;,&#34;55.29878160930527&#34;,&#34;55.12497748150301&#34;,&#34;55.42130584548864&#34;,&#34;55.15246246213931&#34;,&#34;55.040118775249475&#34;,&#34;54.79984173940808&#34;,&#34;54.611754004068196&#34;,&#34;54.73876823712405&#34;,&#34;55.106654437772995&#34;,&#34;55.11813142327622&#34;,&#34;55.12054367031947&#34;,&#34;55.11163738590538&#34;,&#34;54.99439078507999&#34;,&#34;54.85891721705598&#34;,&#34;54.880726546478314&#34;,&#34;55.13943236775162&#34;,&#34;55.325578824568346&#34;,&#34;54.93737596596585&#34;,&#34;54.86199424999812&#34;,&#34;54.96283000707188&#34;,&#34;55.16446737080449&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;64864466&#34;,&#34;btcPrice&#34;:&#34;0.002783069829542854&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1298860466&#34;,&#34;price&#34;:&#34;1.430169273900777&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.33&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.4215338154290353&#34;,&#34;1.425785384185857&#34;,&#34;1.4279580637852494&#34;,&#34;1.4343164461157478&#34;,&#34;1.44533506798751&#34;,&#34;1.4458980149471825&#34;,&#34;1.442887292689709&#34;,&#34;1.4491458802390045&#34;,&#34;1.4448918253453362&#34;,&#34;1.4395360524680738&#34;,&#34;1.4357054965075182&#34;,&#34;1.4363755324762233&#34;,&#34;1.4337583246701406&#34;,&#34;1.4332867553350375&#34;,&#34;1.4340648195360775&#34;,&#34;1.4392954516048504&#34;,&#34;1.4370648528031746&#34;,&#34;1.4305759187708895&#34;,&#34;1.424273534505395&#34;,&#34;1.423632350356118&#34;,&#34;1.4222169076306148&#34;,&#34;1.429703791180103&#34;,&#34;1.4313133859795066&#34;,&#34;1.4310736027395956&#34;,&#34;1.4305871899611713&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;27213833&#34;,&#34;btcPrice&#34;:&#34;0.000071366250381796&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281745288&#34;,&#34;price&#34;:&#34;0.21575033587212905&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.27&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2154110356391449&#34;,&#34;0.21556395298813918&#34;,&#34;0.21654088100155322&#34;,&#34;0.21734996911672455&#34;,&#34;0.21877239367594722&#34;,&#34;0.21947482492922862&#34;,&#34;0.21980181027276333&#34;,&#34;0.21907182102411207&#34;,&#34;0.21837999474902092&#34;,&#34;0.2179201134075193&#34;,&#34;0.21682795818287987&#34;,&#34;0.2159375839317586&#34;,&#34;0.21597299156806574&#34;,&#34;0.21581331430143438&#34;,&#34;0.2157003812381916&#34;,&#34;0.21633894865093503&#34;,&#34;0.21562618012273047&#34;,&#34;0.2148661902738402&#34;,&#34;0.2153024201330907&#34;,&#34;0.21718195675318105&#34;,&#34;0.21772335614790497&#34;,&#34;0.21670557578562155&#34;,&#34;0.21601186960613397&#34;,&#34;0.2160711796456044&#34;,&#34;0.215952009168073&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;229725419&#34;,&#34;btcPrice&#34;:&#34;0.00001076606299044&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273178433&#34;,&#34;price&#34;:&#34;0.8490855147764932&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.33&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8587964523939258&#34;,&#34;0.8597445619216338&#34;,&#34;0.8611496857436736&#34;,&#34;0.865552155362601&#34;,&#34;0.8666655073914699&#34;,&#34;0.8666063461880543&#34;,&#34;0.8661421792463039&#34;,&#34;0.8670202524108236&#34;,&#34;0.8645275388953965&#34;,&#34;0.8601521201043011&#34;,&#34;0.8593695662980281&#34;,&#34;0.8657494323265613&#34;,&#34;0.8583869608535049&#34;,&#34;0.8542343549878925&#34;,&#34;0.8530614390762854&#34;,&#34;0.8571744599552762&#34;,&#34;0.8555489791484138&#34;,&#34;0.8522001044539881&#34;,&#34;0.8506051562831319&#34;,&#34;0.8513661719170071&#34;,&#34;0.8515003055153064&#34;,&#34;0.850575906991854&#34;,&#34;0.8481896312377586&#34;,&#34;0.8476009622535644&#34;,&#34;0.8483798170565793&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;100046101&#34;,&#34;btcPrice&#34;:&#34;0.000042369844289705&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1215529426&#34;,&#34;price&#34;:&#34;1.5112467074624343&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.514949369280686&#34;,&#34;1.5184328905530695&#34;,&#34;1.5246699575717297&#34;,&#34;1.5386072083468705&#34;,&#34;1.5536094881641007&#34;,&#34;1.5570507422780526&#34;,&#34;1.5627604927137266&#34;,&#34;1.5612721472754483&#34;,&#34;1.5639154910163686&#34;,&#34;1.549373162283526&#34;,&#34;1.5394363442551757&#34;,&#34;1.541157697302903&#34;,&#34;1.5418482781453238&#34;,&#34;1.5543318570374773&#34;,&#34;1.5591142099647026&#34;,&#34;1.560413716352464&#34;,&#34;1.5550693678828413&#34;,&#34;1.5412619320882424&#34;,&#34;1.5279231319722841&#34;,&#34;1.529014575537172&#34;,&#34;1.525325737659197&#34;,&#34;1.523198905794472&#34;,&#34;1.5142615078205033&#34;,&#34;1.5076938986024802&#34;,&#34;1.50652345194352&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;13229981&#34;,&#34;btcPrice&#34;:&#34;0.000075412059874048&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1158473952&#34;,&#34;price&#34;:&#34;1.171933451171993&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.25&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1695001042910693&#34;,&#34;1.1712804054845907&#34;,&#34;1.1741562139239061&#34;,&#34;1.1794010183679478&#34;,&#34;1.1847650307406867&#34;,&#34;1.1855240685834143&#34;,&#34;1.1866371525249342&#34;,&#34;1.1885970359357818&#34;,&#34;1.1869956333747422&#34;,&#34;1.1822077005037634&#34;,&#34;1.1770242148628085&#34;,&#34;1.1761952521974657&#34;,&#34;1.1775290422699476&#34;,&#34;1.177151214850985&#34;,&#34;1.1815075119949334&#34;,&#34;1.1835245073019218&#34;,&#34;1.18137111136774&#34;,&#34;1.177728842314626&#34;,&#34;1.1772995574962846&#34;,&#34;1.1764908572426358&#34;,&#34;1.1761357894815425&#34;,&#34;1.1747314132837732&#34;,&#34;1.172519440065544&#34;,&#34;1.1703671222413707&#34;,&#34;1.169320968143335&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;182763466&#34;,&#34;btcPrice&#34;:&#34;0.000058480137724554&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Collegeboard Completion",
            "content": "Overview: . Overall I thought the quizzes were difficult, I need to study more of the vocab terms mentioned in the questions. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/10/03/collegboardcompletion.html",
            "relUrl": "/markdown/2022/10/03/collegboardcompletion.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] ==0: continue if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;burger and fries&quot;: 5.98, &quot;burger and drink&quot;: 4.98, &quot;fries and drink&quot;: 2.98, } total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) if item == &quot;fries&quot;: total += 1.99 if item == &quot;burger&quot;: total += 3.99 if item == &quot;drink&quot;: total += 0.99 if item == &quot;burger and fries&quot;: total += 5.98 #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 burger and fries $4.98 4.98 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "JavaScript Table",
            "content": "&lt;div id=&quot;javascriptTable&quot;&gt; &lt;/div&gt; &lt;script&gt; const data = [&quot;yasha&quot;,&quot;james&quot;,&quot;quinn&quot;,&quot;aaron&quot;] let table = document.createElement(&quot;table&quot;); let row = document.createElement(&quot;tr&quot;); for(let i=0; i&lt;data.length; i++){ let td=document.createElement(&quot;td&quot;); let node=document.createTextNode(data[i]); td.appendChild(node); row.appendChild(td); } table.appendChild(row); let div = document.getElementById(&quot;javascriptTable&quot;); div.appendChild(table); &lt;/script&gt; .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/09/25/javascript-table.html",
            "relUrl": "/markdown/2022/09/25/javascript-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Quiz plan",
            "content": "My quiz plan: . Create a quiz about chelsea that has questions that have specific answers that need to be typed and submitted | Brainstorm &amp; learn about how code.org works | Create: use what I know to start it by myself then get help if needed | Finalize: After creating the quiz, review it and run it myself to check and make sure its accurate | . Drafting: . For my code it was challenging for me to use an if statement to help me code a question that requires typing and submitting but I figured it out. . here is the code: onEvent(“button3”, “click”, function( ) { console.log(“answerbutton entered text: “ + getText(“text_input3”)); if (getText(“text_input3”) == “1905”) { setScreen(“question3”); } else { setScreen(“incorrectpage”); . Data Abstraction . An example of Data Abstraction in this program is the “font size” chart. It holds multiple selections that represent different sizes. A random number function takes a random size selection from the list and sets the default font size to that selection. . The point . The point of the assignment was to get comfortable with code.org but specifically java script. . # Managing Complexity . An example of complexity management in this quiz is the layout. The quiz is divided into two parts: pasword and exploration in the program. This can easily be seen in the first part of the code, each command has its own defined function. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/pbl/2022/09/11/design-idea.html",
            "relUrl": "/markdown/pbl/2022/09/11/design-idea.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "To Be Decided",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/java/2022/09/09/makingmyquiz.html",
            "relUrl": "/java/2022/09/09/makingmyquiz.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Remote Theme Change",
            "content": "Changing Remote Theme . By default, your web page has the theme minima, I changed that theme to a custom one. . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/2022/09/05/remote-theme-change.html",
            "relUrl": "/jupyter/2022/09/05/remote-theme-change.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Dictionaries Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer # Questions regarding coding below. question_prompts = [ &quot;What is the name of the syntax that can pass variables in html? n n&quot;, &quot;What is it called for a command you give your computer? n n&quot;, &quot;Is it important to define your varibles? n n&quot;, &quot;If you do not definne your varibles what will happen when you try and run the code? n n&quot;, ] questions = [ Question(question_prompts[0], &quot;liquid&quot;), Question(question_prompts[1], &quot;input&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;syntax error&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you got 4 out of 4 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/python/2022/09/05/dictionaries-quiz.html",
            "relUrl": "/jupyter/python/2022/09/05/dictionaries-quiz.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, Yasha!&quot;); . Hello, Yasha! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, yasha!&quot;; console.log(msg); . Hello, yasha! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(&quot;foobar&quot;); . foobar . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf, hobbies) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.hobbies = hobbies; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role, hobbies: this.hobbies}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;coding&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, hobbies: &#39;coding&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;hobbies&#34;:&#34;coding&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;yasha&quot;, &quot;yashakhoshini&quot;, 2025, &quot;soccer&quot;), new Person(&quot;james&quot;, &quot;jameshunter12&quot;, 2025, &quot;soccer&quot;), new Person(&quot;aaron&quot;, &quot;aaron-rub&quot;, 2025, &quot;videogames&quot;), new Person(&quot;quinn&quot;, &quot;gigtieup&quot;, 2025, &quot;lacrosse&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, hobbies: &#39;coding&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;yasha&#39;, ghID: &#39;yashakhoshini&#39;, classOf: 2025, hobbies: &#39;soccer&#39;, role: &#39;Student&#39; }, Person { name: &#39;james&#39;, ghID: &#39;jameshunter12&#39;, classOf: 2025, hobbies: &#39;soccer&#39;, role: &#39;Student&#39; }, Person { name: &#39;aaron&#39;, ghID: &#39;aaron-rub&#39;, classOf: 2025, hobbies: &#39;videogames&#39;, role: &#39;Student&#39; }, Person { name: &#39;quinn&#39;, ghID: &#39;gigtieup&#39;, classOf: 2025, hobbies: &#39;lacrosse&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;,&#34;hobbies&#34;:&#34;coding&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, hobbies: &#39;coding&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;hobbies&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.hobbies + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfhobbiesRole . Mr M | jm1021 | 1977 | coding | Teacher | yasha | yashakhoshini | 2025 | soccer | Student | james | jameshunter12 | 2025 | soccer | Student | aaron | aaron-rub | 2025 | videogames | Student | quinn | gigtieup | 2025 | lacrosse | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Python Variables and Types . # variable of type string name = &quot;Yasha Khoshini&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 14 print(&quot;age&quot;, age, type(age)) # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;HTML&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print(&quot;langs[2]&quot;) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Yasha Khoshini &lt;class &#39;str&#39;&gt; age 14 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; langs[2] person {&#39;name&#39;: &#39;Yasha Khoshini&#39;, &#39;age&#39;: 14, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;HTML&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Yasha Khoshini &lt;class &#39;str&#39;&gt; . Defining InfoDB . InfoDb = [] # Append to List a Dictionary as a storage area that can be called in future code. InfoDb.append({ &quot;FirstName&quot;: &quot;yasha&quot;, &quot;LastName&quot;: &quot;khoshini&quot;, &quot;DOB&quot;: &quot;October 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;yashakhoshini@icloud.com&quot;, &quot;Worst EPL Team&quot;: &quot;Arsenal&quot;, &quot;Family Members&quot;: [&quot;Kian&quot;, &quot;Iyla&quot;, &quot;Hedieh&quot;, &quot;Reza&quot;] }) # InfoDb[0] InfoDb.append({ &quot;FirstName&quot;: &quot;kian&quot;, &quot;LastName&quot;: &quot;khoshini&quot;, &quot;DOB&quot;: &quot;April 14&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;kiankhoshini@icloud.com&quot;, &quot;Worst EPL Team&quot;: &quot;Crystal Palace&quot;, &quot;Family Members&quot;: [&quot;Yasha&quot;, &quot;Iyla&quot;, &quot;Hedieh&quot;, &quot;Reza&quot;] }) # InfoDb[1] print() print() # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;yasha&#39;, &#39;LastName&#39;: &#39;khoshini&#39;, &#39;DOB&#39;: &#39;October 5&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;yashakhoshini@icloud.com&#39;, &#39;Worst EPL Team&#39;: &#39;Arsenal&#39;, &#39;Family Members&#39;: [&#39;Kian&#39;, &#39;Iyla&#39;, &#39;Hedieh&#39;, &#39;Reza&#39;]}, {&#39;FirstName&#39;: &#39;kian&#39;, &#39;LastName&#39;: &#39;khoshini&#39;, &#39;DOB&#39;: &#39;April 14&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;kiankhoshini@icloud.com&#39;, &#39;Worst EPL Team&#39;: &#39;Crystal Palace&#39;, &#39;Family Members&#39;: [&#39;Yasha&#39;, &#39;Iyla&#39;, &#39;Hedieh&#39;, &#39;Reza&#39;]}] . For loop &amp; Printing Data . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Family Members:&quot;, &quot;, &quot;.join(d_rec[&quot;Family Members&quot;])) print(&quot; t&quot;, &quot;Worst EPL Team:&quot;, d_rec[&quot;Worst EPL Team&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . While Loop . # InfoDB is always greater than variable &quot;i&quot; because it proves the statement true or else there will be no output. def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . Recursive Loop . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . For Loop with Index . for index in range(len(InfoDb)): print_data(InfoDb[index]) . yasha khoshini Residence: San Diego Birth Day: October 5 Family Members: Kian, Iyla, Hedieh, Reza Worst EPL Team: Arsenal kian khoshini Residence: San Diego Birth Day: April 14 Family Members: Yasha, Iyla, Hedieh, Reza Worst EPL Team: Crystal Palace . Reversing A List . mylist = [5, 6, 7, 8, 9, 10] print(&quot;before&quot;, mylist) #Telling mylist to reverse mylist.reverse() # This is the reversed version print(&quot;after&quot;, mylist) . before [5, 6, 7, 8, 9, 10] after [10, 9, 8, 7, 6, 5] .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "First Quiz",
            "content": "class Question: def __init__(self, prompt, answer): # defines variables self.prompt = prompt self.answer = answer # this is my list of questions with question and answer choices question_prompts = [ &quot;What is a secotion of code that is on top of files with key-values? n(a)front matter n(b)variable&quot;, &quot;Is sytac used to format plain text known as Markdown? ? nyes/ nno&quot;, &quot;Does boolean mean a value is either true or false? nyes/ nno&quot;, &quot;Is a sequence two or more line of code? nyes nno&quot;, ] # answer questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;yes&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;yes&quot;), ] # prints score (correct answer = score + 1) def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you got 4 out of 4 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/python/2022/08/26/quiz.html",
            "relUrl": "/jupyter/python/2022/08/26/quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Bash Test",
            "content": "python --version python2 --version . Python 2.7.18 Python 2.7.18 . conda list . # packages in environment at /Users/hbadkoobehi/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.5 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /Users/hbadkoobehi/Library/Jupyter/kernels/bash python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 . jupyter kernelspec list . Available kernels: bash /Users/hbadkoobehi/Library/Jupyter/kernels/bash python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Library/Frameworks/Python.framework/Versions/3.10/share/jupyter/kernels/python3 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/bash/2022/08/25/jupyter-tests.html",
            "relUrl": "/jupyter/bash/2022/08/25/jupyter-tests.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "All About The Sikhism Religion",
            "content": "Information About The Sikhism Religion . Here is the link to my information about the Sikhism Religion .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/08/24/sikhism-religion.html",
            "relUrl": "/markdown/2022/08/24/sikhism-religion.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "My First Post",
            "content": "I enjoy playing soccer and I don’t enjoy school. I am now finalizing commit. .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/markdown/2022/08/20/first-post.html",
            "relUrl": "/markdown/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "First Notebook",
            "content": "print(&quot;hello&quot;) # Python code to demonstrate the working of # choice() and randrange() # importing &quot;random&quot; for random operations import random # using choice() to generate a random number from a # given list of numbers. print(&quot;A random number from list is : &quot;, end=&quot;&quot;) print(random.choice([1, 4, 8, 10, 3, 5, 99, 100, 100002, 403])) # using randrange() to generate in range from 20 # to 50. The last parameter 3 is step size to skip # three numbers when selecting. print(&quot;A random number from range is : &quot;, end=&quot;&quot;) print(random.randrange(20, 50, 3)) . hello A random number from list is : 100002 A random number from range is : 44 .",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/jupyter/python/2022/08/20/first-notebook.html",
            "relUrl": "/jupyter/python/2022/08/20/first-notebook.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Pbl Binary",
            "content": "",
            "url": "https://yashakhoshini.github.io/yasha-fastpages/2022/07/07/PBL-binary.html",
            "relUrl": "/2022/07/07/PBL-binary.html",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yashakhoshini.github.io/yasha-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yashakhoshini.github.io/yasha-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}